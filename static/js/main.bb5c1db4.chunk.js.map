{"version":3,"sources":["../../node_modules/@project/common/locales lazy /^/.//.*/.json$/ groupOptions: {} namespace object","components/i18n.ts","hooks/use-window-size.ts","../../common/src/mp3-encoder.ts","../../common/src/mp3-encoder-worker.js","../../common/src/util.ts","../../common/src/audio-clip.ts","../../common/src/image-transformer.ts","../../common/src/image.ts","../../common/src/fetcher.ts","../../common/src/anki.ts","../../common/src/model.ts","../../common/src/auto-pause-context.ts","../../common/src/offscreen-dom-cache.ts","../../common/index.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/subtitle-reader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","../../common/subtitle-collection/src/subtitle-collection.ts","services/playback-preferences.ts","services/broadcast-channel-video-protocol.ts","services/chrome-tab-video-protocol.ts","services/clock.ts","services/cached-local-storage.ts","components/Controls.tsx","services/media-adapter.ts","components/SubtitlePlayer.tsx","services/video-channel.ts","components/Player.tsx","components/SettingsDialog.tsx","hooks/use-outside-click-listener.ts","services/settings-provider.ts","../../common/key-binder/src/key-binder.ts","services/player-channel.ts","services/app-key-binder.ts","components/VideoPlayer.tsx","hooks/use-subtitle-dom-cache.ts","hooks/use-chrome-extension.ts","services/copy-history-repository.ts","components/localized-error.ts","services/chrome-extension.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","i18nInit","i18n","use","LanguageDetector","resourcesToBackend","language","initReactI18next","init","partialBundledLanguages","resources","fallbackLng","debug","process","ns","defaultNS","interpolation","escapeValue","detection","order","lookupLocalStorage","caches","useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Mp3Encoder","blob","workerFactory","reject","a","reader","FileReader","onload","audioContext","AudioContext","target","decodeAudioData","result","audioBuffer","channels","i","numberOfChannels","push","getChannelData","worker","postMessage","command","length","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","Math","floor","round","minutes","hours","String","padStart","surroundingSubtitles","subtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","forward","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","start","originalStart","end","afterTimestamp","min","text","originalEnd","track","beforeTimestamp","max","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","subtitle","interval","overlapStart","joinSubtitles","filter","s","trim","join","extractText","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","color","fontSize","Number","thickness","opacity","hexToRgb","r","g","b","hex","exec","parseInt","defaultMp3WorkerFactory","recorderConfiguration","AUDIO_TYPES","MediaRecorder","isTypeSupported","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","this","_blob","stopAudio","clearTimeout","undefined","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","isPlayable","MissingFileAudioData","fileName","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","resizeCanvas","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","MissingFileImageData","Image","available","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","PostMineAction","AutoPausePreference","PlayMode","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","action","version","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","OffscreenDomCache","offscreenElement","_cachedContentElements","_empty","key","html","cached","innerHTML","_offscreenElement","element","className","append","supportedLanguages","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onCancel","onViewImage","onOpenSettings","onRerecord","onCopyToClipboard","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","getBoundingClientRect","useTranslation","current","textForTimestampInterval","subtitleStart","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","now","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","count","field","audioHelperText","imageHelperText","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","minimumChange","handleCopyImageToClipboard","pngBlob","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","maxRows","InputProps","endAdornment","minRows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","node","n1","n2","parseSrt","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","write","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","event","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","noWrap","component","rel","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","extensionUpdateAvailable","gt","i18nKey","Link","installed","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","SubtitleAlignment","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","time","CachedLocalStorage","_cache","fromStorage","localStorage","getItem","setItem","removeItem","volumeKey","theaterModeKey","offsetKey","subtitleAlignmentKey","subtitlePositionOffetKey","PlaybackPreferences","storage","get","volume","set","theaterMode","rememberSubtitleOffset","val","bottom","alignment","useControlStyles","left","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onPlay","onUnloadAudio","onUnloadVideo","onOffsetChange","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","subtitleAlignment","subtitleAlignmentEnabled","onSubtitleAlignment","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","handleSubtitleAlignment","newAlignment","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onCopy","onToggleSubtitleTrack","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindResetOffet","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","currentMockSubtitle","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","currentSubtitle","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","mediaTimestamp","toggleSubtitleTrackInListMessage","_remove","videoFileName","subtitleFileNames","names","settings","msg","callbacks","splice","videoFrame","border","trackLength","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","ankiDialogOpen","onError","onLoaded","onAnkiDialogRequest","onAnkiDialogRewind","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","onTakeScreenshot","rewindSubtitle","setPlayMode","setSubtitles","subtitlesSentThroughChannel","setSubtitlesSentThroughChannel","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setChannel","channelRef","setResumeOnFinishedAnkiDialogRequest","setDisabledSubtitleTracks","audioRef","mediaAdapter","calculateLength","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","lte","uuidv4","onExit","onReady","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","mediaTimetamp","onCurrentTime","onToggleSubtitleTrackInList","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","encodeURIComponent","handlePlay","handlePause","handleSeekToTimestamp","shouldPlay","handleCopyFromSubtitlePlayer","forceUseGivenSubtitle","copy","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","unbind","bindPlay","bindAdjustPlaybackRate","increase","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","bindTakeScreenshot","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","switchLabel","verticallyCentered","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","extensionOverridden","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","handler","pressed","hotkeys","getPressedKeyString","isAModifier","isBModifier","keyup","clickHandler","contains","useOutsideClickListener","xs","contentEditable","AddCustomField","onAddCustomField","setFieldName","SettingsDialog","scrollToId","keyBindProperties","copySubtitle","ankiExport","takeScreenshot","togglePlay","toggleAutoPause","toggleCondensedPlayback","toggleSubtitles","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","seekBackward","seekForward","seekToPreviousSubtitle","seekToNextSubtitle","seekToBeginningOfCurrentSubtitle","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","increaseOffset","decreaseOffset","resetOffset","increasePlaybackRate","decreasePlaybackRate","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","preCacheSubtitleDom","setPreCacheSubtitleDom","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","keyBindSet","setKeyBindSet","setRememberSubtitleOffset","miningHistoryStorageLimit","setMiningHistoryStorageLimit","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","setLanguage","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handlePreCacheSubtitleDomChange","checked","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleMiningHistoryStorageLimit","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","handleLanguage","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","origin","location","hostname","DialogTitle","FormLabel","FormGroup","FormHelperText","values","components","FormControlLabel","control","Switch","labelPlacement","inputProps","select","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","preCacheSubtitleDomKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","miningHistoryStorageLimitKey","languageKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","delete","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","DefaultKeyBinder","disabledGetter","subtitleGetter","capture","shortcut","copyHandler","_bind","onAnkiExport","ankiExportHandler","onUpdateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","unbindPrevious","unbindNext","delegate","_adjacentSubtitle","previousShortcut","nextShortcut","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","_currentSubtitle","minDiff","MAX_SAFE_INTEGER","diff","onSeekBackwardOrForward","unbindBack","backShortcut","backHandler","adjacentSubtitleIndex","currentOffset","decreaseShortcut","increaseShortcut","decreaseHandler","increaseHandler","unbindDecrease","unbindIncrease","onResetOffset","onAdjustPlaybackRate","onToggleSubtitles","shortcuts","unbindHandlers","unbindHandler","onAutoPause","wrappedHandler","stopImmediatePropagation","keydown","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","takeScreenshotHandlers","onExtensionMessage","handlers","h","KeyboardEvent","useCapture","takeScreenshotHandler","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","ShowingSubtitle","videoRef","subtitleStyles","VideoPlayer","seekRequest","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","setSubtitleAlignment","subtitlePositionOffset","setSubtitlePositionOffset","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","lastMinedRecord","setLastMinedRecord","changeLanguage","videoRefCallback","videoElement","onloadeddata","ontimeupdate","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","toggleSubtitleTrackInList","extractSubtitles","mineSubtitle","mineCurrentSubtitle","extracted","currentTimestamp","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","onWheel","deltaY","shouldIncreaseOffset","handleDoubleClick","subtitleStylesString","textShadow","fontFamily","computeStyleString","handleAlertClosed","render","domCache","setDomCache","getSubtitleDomCache","add","useSubtitleDomCache","showingSubtitleHtml","bounds","clientX","clientY","controls","onDoubleClick","firstChild","return","lastChild","isMobile","realExtension","CopyHistoryDatabase","copyHistoryItems","stores","Dexie","CopyHistoryRepository","limit","_db","_limit","reverse","toArray","audioTrack","filePlaybackRate","record","audioFileName","put","_prune","lastIndex","where","belowOrEqual","primaryKeys","bulkDelete","LocalizedError","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","keyBindNameMap","initialExtension","listenForVersion","versionListener","translatedCommands","extensionCommandName","unbindInitialListener","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","calculateInterval","fromFile","fromMissingFile","imageFromItem","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","setExtension","useChromeExtension","setVideoFullscreen","videoPlayerSeekRequest","setVideoPlayerSeekRequest","drawerRatio","minDrawerSize","copyHistoryRepository","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","locKey","locParams","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","handleTakeScreenshot","lastCopyHistoryItem","newCopyHistoryItem","save","subtitleFile","newCopiedSubtitle","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","publishSharedGlobalSettings","handleDeleteCopyHistoryItem","newCopiedSubtitles","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","handleAnkiDialogRewindFromVideoPlayer","subscribeTabs","t1","t2","selectedTabMissing","tabName","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","handleCopyToClipboard","ClipboardItem","i18nInitialized","setI18nInitialized","on","off","useI18nInitialized","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","basename"],"mappings":"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","file":"static/js/main.bb5c1db4.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": [\n\t\t415,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t416,\n\t\t4\n\t],\n\t\"./ja.json\": [\n\t\t417,\n\t\t5\n\t],\n\t\"./pl.json\": [\n\t\t418,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 293;\nmodule.exports = webpackAsyncContext;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { useEffect, useState } from 'react';\n\nconst i18nInit = i18n\n    .use(LanguageDetector)\n    .use(resourcesToBackend((language: string) => import(`@project/common/locales/${language}.json`)))\n    .use(initReactI18next)\n    .init({\n        partialBundledLanguages: true,\n        resources: {},\n        fallbackLng: 'en',\n        debug: process.env.NODE_ENV === 'development',\n        ns: 'translation',\n        defaultNS: 'translation',\n        interpolation: {\n            escapeValue: false,\n        },\n        detection: {\n            order: ['localStorage'],\n            lookupLocalStorage: 'i18nextLng',\n            caches: ['localStorage'],\n        },\n    });\n\nconst useI18nInitialized = () => {\n    const [i18nInitialized, setI18nInitialized] = useState<boolean>(false);\n    const [language, setLanguage] = useState<string>(i18n.language);\n\n    useEffect(() => {\n        i18nInit.then(() => setI18nInitialized(true));\n    }, []);\n\n    useEffect(() => {\n        i18n.on('languageChanged', setLanguage);\n        return () => i18n.off('languageChanged', setLanguage);\n    }, []);\n\n    return { i18nInitialized, language };\n};\n\nexport { useI18nInitialized, i18n };\n","import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder-worker.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { Rgb, SubtitleModel } from './model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n\nexport interface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function computeStyleString(subtitleSettings: SubtitleStyle) {\n    const color = subtitleSettings.subtitleColor;\n    const fontSize = subtitleSettings.subtitleSize + 'px';\n    let textShadow: string;\n\n    if (subtitleSettings.subtitleOutlineThickness > 0) {\n        const thickness = subtitleSettings.subtitleOutlineThickness;\n        const color = subtitleSettings.subtitleOutlineColor;\n        textShadow = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    } else {\n        textShadow = '';\n    }\n\n    let backgroundColor: string;\n\n    if (subtitleSettings.subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleSettings.subtitleBackgroundOpacity;\n        const color = subtitleSettings.subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        backgroundColor = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    } else {\n        backgroundColor = '';\n    }\n\n    let fontFamily: string;\n\n    if (subtitleSettings.subtitleFontFamily && subtitleSettings.subtitleFontFamily.length > 0) {\n        fontFamily = `${subtitleSettings.subtitleFontFamily}`;\n    } else {\n        fontFamily = '';\n    }\n\n    return `color:${color} !important;font-size:${fontSize} !important;text-shadow:${textShadow} !important;background-color:${backgroundColor} !important;font-family:${fontFamily} !important`;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nexport function hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\n    if (!result) {\n        return { r: 255, g: 255, b: 255 };\n    }\n\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n","import Mp3Encoder from './mp3-encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder-worker.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n    isPlayable: () => boolean;\n}\n\nfunction recorderConfiguration() {\n    const AUDIO_TYPES: { [key: string]: string } = {\n        'audio/ogg;codecs=opus': 'ogg',\n        'audio/webm;codecs=opus': 'webm',\n    };\n    return Object.keys(AUDIO_TYPES)\n        .filter(MediaRecorder.isTypeSupported)\n        .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n\nclass MissingFileAudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly _extension: string;\n\n    constructor(fileName: string, start: number, end: number) {\n        this._name = `${fileName}_${start}_${end}`;\n        this._start = start;\n        this._end = end;\n        [, this._extension] = recorderConfiguration();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    async play() {\n        throw new Error('Not supported');\n    }\n\n    async blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not  supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return false;\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    static fromMissingFile(fileName: string, start: number, end: number) {\n        return new AudioClip(new MissingFileAudioData(fileName, start, end));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n","import { RectModel } from \"./model\";\n\nexport const resizeCanvas = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    maxWidth: number,\n    maxHeight: number\n): Promise<HTMLCanvasElement> => {\n    return new Promise((resolve, reject) => {\n        const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n        const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n        const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n        if (ratio < 1) {\n            const newWidth = canvas.width * ratio;\n            const newHeight = canvas.height * ratio;\n            createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight, resizeQuality: 'high' })\n                .then((sprite) => {\n                    canvas.width = newWidth;\n                    canvas.height = newHeight;\n                    ctx.drawImage(sprite, 0, 0);\n                    resolve(canvas);\n                })\n                .catch((e) => reject(e));\n        } else {\n            resolve(canvas);\n        }\n    });\n};\n\nexport const cropAndResize = async (\n    maxWidth: number,\n    maxHeight: number,\n    rect: RectModel,\n    imageDataUrl: string\n): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = async () => {\n            const canvas = document.createElement('canvas');\n            const r = window.devicePixelRatio;\n            const width = rect.width * r;\n            const height = rect.height * r;\n            canvas.width = width;\n            canvas.height = height;\n            const ctx = canvas.getContext('2d')!;\n            ctx.drawImage(image, rect.left * r, rect.top * r, width, height, 0, 0, width, height);\n\n            if (maxWidth > 0 || maxHeight > 0) {\n                try {\n                    await resizeCanvas(canvas, ctx, maxWidth, maxHeight);\n                    resolve(canvas.toDataURL('image/jpeg'));\n                } catch (e) {\n                    console.error('Failed to crop and resize image: ' + e);\n                    reject(e);\n                }\n            } else {\n                resolve(canvas.toDataURL('image/jpeg'));\n            }\n        };\n\n        image.src = imageDataUrl;\n    });\n};","import { resizeCanvas } from './image-transformer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    await resizeCanvas(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\nclass MissingFileImageData implements ImageData {\n    private readonly _name: string;\n\n    constructor(fileName: string, timestamp: number) {\n        this._name = `${fileName}_${Math.floor(timestamp)}`;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return false;\n    }\n\n    base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    dataUrl(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n    available: boolean;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    static fromMissingFile(fileName: string, timestamp: number) {\n        return new Image(new MissingFileImageData(fileName, timestamp));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    get available() {\n        return this.data.available;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './audio-clip';\nimport Image from './image';\nimport { HttpFetcher, Fetcher } from './fetcher';\nimport { AnkiSettings } from './settings';\nimport sanitize from 'sanitize-filename';\nimport { AudioModel, ImageModel, SubtitleModel } from './model';\nimport { extractText } from './util';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport async function updateLastCard(\n    ankiSettings: AnkiSettings,\n    subtitle: SubtitleModel,\n    surroundingSubtitles: SubtitleModel[],\n    audioModel: AudioModel | undefined,\n    imageModel: ImageModel | undefined,\n    sourceString: string,\n    url: string | undefined\n) {\n    const anki = new Anki(ankiSettings);\n    let audioClip =\n        audioModel === undefined\n            ? undefined\n            : AudioClip.fromBase64(\n                  sourceString,\n                  subtitle.start,\n                  subtitle.end,\n                  audioModel.playbackRate ?? 1,\n                  audioModel.base64,\n                  audioModel.extension\n              );\n\n    return await anki.export(\n        extractText(subtitle, surroundingSubtitles),\n        undefined,\n        audioClip,\n        imageModel === undefined\n            ? undefined\n            : Image.fromBase64(sourceString, subtitle.start, imageModel.base64, imageModel.extension),\n        undefined,\n        sourceString,\n        url,\n        {},\n        ankiSettings.tags,\n        'updateLast'\n    );\n}\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip && audioClip.isPlayable()) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image && image.available) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (tags.length > 0) {\n                        await this._executeAction(\n                            'addTags',\n                            { notes: [lastNoteId], tags: tags.join(' ') },\n                            ankiConnectUrl\n                        );\n                    }\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { AnkiSettings } from './settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n    openedFromMiningCommand?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","import { SubtitleModel } from './model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","export default class OffscreenDomCache {\n    private offscreenElement?: HTMLElement;\n    private _cachedContentElements: { [key: string]: HTMLElement } = {};\n    private _empty = true;\n\n    constructor() {}\n\n    public get empty() {\n        return this._empty;\n    }\n\n    clear() {\n        this.offscreenElement?.remove();\n        this.offscreenElement = undefined;\n        this._cachedContentElements = {};\n        this._empty = true;\n    }\n\n    add(key: string, html: string) {\n        const cached = document.createElement('div');\n        cached.innerHTML = `${html}\\n`;\n        this._cachedContentElements[key] = cached;\n        this._offscreenElement().appendChild(cached);\n        this._empty = false;\n    }\n\n    return(element: HTMLElement) {\n        this._offscreenElement().appendChild(element);\n    }\n\n    get(key: string, html?: () => string) {\n        let cached = this._cachedContentElements[key];\n\n        if (!cached) {\n            if (html === undefined) {\n                throw new Error(`Cached html not found for key ${key}`);\n            }\n\n            cached = document.createElement('div');\n            cached.innerHTML = html();\n            this._cachedContentElements[key] = cached;\n            this._offscreenElement().appendChild(cached);\n        }\n\n        return cached;\n    }\n\n    private _offscreenElement() {\n        if (this.offscreenElement) {\n            return this.offscreenElement;\n        }\n\n        const element = document.createElement('div');\n        element.className = 'asbplayer-offscreen';\n        document.body.append(element);\n        this.offscreenElement = element;\n        return element;\n    }\n}\n","export { default as AudioClip } from './src/audio-clip';\nexport { default as Mp3Encoder } from './src/mp3-encoder';\nexport { default as Image } from './src/image';\nexport * from './src/anki';\nexport * from './src/image-transformer';\nexport * from './src/command';\nexport * from './src/util';\nexport * from './src/settings';\nexport * from './src/model';\nexport * from './src/message';\nexport * from './src/extension-settings';\nexport { default as AutoPauseContext } from './src/auto-pause-context';\nexport { default as OffscreenDomCache } from './src/offscreen-dom-cache';\nexport const supportedLanguages = ['en', 'ja', 'de', 'pl'];\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    onCopyToClipboard: (blob: Blob) => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    onCopyToClipboard,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n    const { t } = useTranslation();\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!audioClip?.isPlayable()) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? t('ankiDialog.foundDuplicateNotes', {\n                      count: duplicateNotes.length,\n                      word: word,\n                      field: settingsProvider.wordField,\n                  })\n                : t('ankiDialog.foundNoDuplicateNote', { word: word, field: settingsProvider.wordField });\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!image?.available) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const currentLength = timestampBoundaryInterval[1] - timestampBoundaryInterval[0];\n        const minimumChange = currentLength / 4;\n        const newMin = Math.max(\n            0,\n            Math.min(\n                timestampBoundaryInterval[0] - minimumChange,\n                2 * timestampBoundaryInterval[0] - timestampInterval[0]\n            )\n        );\n        const newMax = Math.max(\n            timestampBoundaryInterval[1] + minimumChange,\n            2 * timestampBoundaryInterval[1] - timestampInterval[1]\n        );\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            onCopyToClipboard(await image.pngBlob());\n        },\n        [image, onCopyToClipboard]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title={t('ankiDialog.rerecord')!}>\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    let audioHelperText: string | undefined;\n\n    if (audioClip) {\n        if (!audioClip.isPlayable()) {\n            audioHelperText = t('ankiDialog.audioFileLinkLost') ?? undefined;\n        } else if (onRerecord === undefined && !audioClip.isSliceable()) {\n            audioHelperText = t('ankiDialog.cannotUpdateAudio') ?? undefined;\n        }\n    }\n\n    let imageHelperText: string | undefined;\n\n    if (image) {\n        if (!image.available) {\n            imageHelperText = t('ankiDialog.imageFileLinkLost') ?? undefined;\n        }\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {t('ankiDialog.title')}\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n                {onCancel && (\n                    <IconButton edge=\"end\" onClick={() => onCancel()}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label={t('ankiDialog.sentence')}\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.applySelection')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        minRows={8}\n                        label={t('ankiDialog.definition')!}\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.word')}\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.searchInAnki')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label={t('ankiDialog.audio')}\n                                helperText={audioHelperText}\n                                disabled={!audioClip.isPlayable()}\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label={t('ankiDialog.image')}\n                                helperText={imageHelperText}\n                                disabled={!image.available}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title={t('ankiDialog.copyToClipboard')!}>\n                                                <span>\n                                                    <IconButton\n                                                        disabled={!image.available}\n                                                        onClick={handleCopyImageToClipboard}\n                                                        edge=\"end\"\n                                                    >\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.source')}\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label={t('ankiDialog.url')}\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText={t('ankiDialog.tagList')}\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.resetSlider')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomIn')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomOut')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    {t('ankiDialog.openInAnki')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    {t('ankiDialog.updateLastCard')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    {t('ankiDialog.export')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .filter((node) => node.textImage !== undefined || node.text !== '')\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement).trim();\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n    const { t } = useTranslation();\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            {t('action.openFiles')}\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            {t('action.downloadSubtitlesAsSrt')}\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title={t('action.openFiles')!}\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" noWrap className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title={t('bar.donate')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#donations\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.submitIssue')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.help')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.settings')!}>\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title={t('bar.miningHistory')!} show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","export function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioFileName?: string;\n    audioTrack?: string;\n    videoFile?: File;\n    videoFileName?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const { t } = useTranslation();\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.copy')} />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.jumpTo')} />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadAudio')}\n                        />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadImage')}\n                        />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.delete')} />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n    const { t } = useTranslation();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title={t('copyHistory.downloadMinedSubsAsSrt')!}>\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title={t('copyHistory.exportToAnki')!}>\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <NoteAddIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? t('copyHistory.blank') : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">{t('copyHistory.miningHistoryEmpty')}</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const extensionUpdateAvailable = extension.version && gt(latestExtensionVersion, extension.version);\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        <Trans i18nKey={'landing.cta'}>\n                            Drag and drop subtitle and media files, or\n                            <Link\n                                target=\"#\"\n                                className={classes.browseLink}\n                                onClick={onFileSelector}\n                                color=\"secondary\"\n                                component=\"label\"\n                            >\n                                browse\n                            </Link>\n                            .\n                        </Trans>\n                        <br />\n                        {!extension.installed && (\n                            <Trans i18nKey=\"landing.extensionNotInstalled\">\n                                Install the\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>\n                                to sync subtitles with streaming video.\n                            </Trans>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <Trans i18nKey=\"landing.extensionUpdateAvailable\">\n                                An extension\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </Trans>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from '../../src/model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import CachedLocalStorage from './cached-local-storage';\nimport SettingsProvider from './settings-provider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst subtitleAlignmentKey = 'subtitleAlignment';\nconst subtitlePositionOffetKey = 'subtitlePositionOffset';\nconst defaultVolume = 100;\n\nexport enum SubtitleAlignment {\n    bottom = 0,\n    top = 1,\n}\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n    private readonly storage = new CachedLocalStorage();\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = this.storage.get(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        this.storage.set(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return this.storage.get(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        this.storage.set(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = this.storage.get(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        this.storage.set(offsetKey, String(offset));\n    }\n\n    get subtitleAlignment() {\n        const val = this.storage.get(subtitleAlignmentKey);\n\n        if (val === undefined) {\n            return SubtitleAlignment.bottom;\n        }\n\n        return Number(val) as SubtitleAlignment;\n    }\n\n    set subtitleAlignment(alignment: SubtitleAlignment) {\n        this.storage.set(subtitleAlignmentKey, String(alignment));\n    }\n\n    get subtitlePositionOffset() {\n        const val = this.storage.get(subtitlePositionOffetKey);\n\n        if (val === null) {\n            return 100;\n        }\n\n        return Number(val);\n    }\n\n    set subtitlePositionOffset(offset: number) {\n        this.storage.set(subtitlePositionOffetKey, String(offset));\n    }\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./video-protocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\nimport { VideoProtocol, VideoProtocolMessage } from './video-protocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/clock';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    const { t } = useTranslation();\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        {t('controls.normalMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        {t('controls.condensedMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        {t('controls.autoPauseMode')}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n    subtitleAlignmentEnabled?: boolean;\n    subtitleAlignment?: SubtitleAlignment;\n    onSubtitleAlignment?: (alignment: SubtitleAlignment) => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n    subtitleAlignment,\n    subtitleAlignmentEnabled,\n    onSubtitleAlignment,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const { t } = useTranslation();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const handleSubtitleAlignment = useCallback(() => {\n        if (!subtitleAlignmentEnabled || subtitleAlignment === undefined || onSubtitleAlignment === undefined) {\n            return;\n        }\n\n        const newAlignment =\n            subtitleAlignment === SubtitleAlignment.top ? SubtitleAlignment.bottom : SubtitleAlignment.top;\n        onSubtitleAlignment(newAlignment);\n    }, [subtitleAlignment, subtitleAlignmentEnabled, onSubtitleAlignment]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.subtitleOffset')!}>\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.playbackRate')!}>\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitleAlignmentEnabled && subtitleAlignment !== undefined && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleSubtitleAlignment}>\n                                        {subtitleAlignment === SubtitleAlignment.top ? (\n                                            <VerticalAlignTopIcon />\n                                        ) : (\n                                            <VerticalAlignBottomIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    AutoPauseContext,\n    mockSurroundingSubtitles,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { KeyBinder } from '@project/common/key-binder';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        forceUseGivenSubtitle?: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const { t } = useTranslation();\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(0);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const currentMockSubtitle = useCallback(() => {\n        const timestamp = clock.time(length);\n        const end = Math.min(timestamp + 5000, length);\n        return {\n            text: '',\n            start: timestamp,\n            originalStart: timestamp,\n            end: end,\n            originalEnd: end,\n            track: 0,\n        };\n    }, [clock, length]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!subtitles || subtitles.length === 0) {\n                return mockSurroundingSubtitles(currentMockSubtitle(), length, 5000);\n            }\n\n            if (!selectedSubtitleIndexesRef.current || Object.keys(selectedSubtitleIndexesRef.current).length === 0) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [\n            length,\n            subtitles,\n            currentMockSubtitle,\n            settingsProvider.surroundingSubtitlesCountRadius,\n            settingsProvider.surroundingSubtitlesTimeRadius,\n        ]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            return {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n        }\n\n        if (!selectedSubtitleIndexesRef.current) {\n            return undefined;\n        }\n\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none);\n            },\n            () => disableKeyEvents,\n            () => calculateCurrentSubtitle()\n        );\n    }, [keyBinder, disableKeyEvents, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.showAnkiDialog);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.updateLastCard);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, true);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{t('landing.noSubtitles')}</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    TakeScreenshotToVideoPlayerMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './video-protocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        id: string | undefined,\n        mediaTimestamp: number | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.id,\n                            copyMessage.mediaTimestamp\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n        return () => this._remove(callback, this.exitCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.popOutToggleCallbacks);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            id: string | undefined,\n            mediaTimestamp: number | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiDialogRequestCallbacks);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n        return () => this._remove(callback, this.toggleSubtitleTrackInListCallbacks);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    copy(postMineAction: PostMineAction) {\n        const message: CopyToVideoMessage = { command: 'copy', postMineAction };\n        this.protocol.postMessage(message);\n    }\n\n    takeScreenshot() {\n        const message: TakeScreenshotToVideoPlayerMessage = { command: 'takeScreenshot' };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    PlayMode,\n    PostMineAction,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { KeyBinder } from '@project/common/key-binder';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/broadcast-channel-video-protocol';\nimport ChromeTabVideoProtocol from '../services/chrome-tab-video-protocol';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/media-adapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/video-channel';\nimport ChromeExtension from '../services/chrome-extension';\nimport SubtitleReader from '../services/subtitle-reader';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audio: HTMLAudioElement | null,\n    video: MediaElement | undefined,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n): number {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audio && audio.duration ? 1000 * audio.duration : 0;\n    const videoLength = video && video.duration ? 1000 * video.duration : 0;\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogOpen: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: any) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAnkiDialogRewind: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    onTakeScreenshot: (mediaTimestamp: number) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAnkiDialogRewind,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    onTakeScreenshot,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const [subtitlesSentThroughChannel, setSubtitlesSentThroughChannel] = useState<boolean>();\n    const subtitlesRef = useRef<DisplaySubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [channel, setChannel] = useState<VideoChannel>();\n    const channelRef = useRef<VideoChannel>();\n    channelRef.current = channel;\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter({ current: channel });\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [channel, audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const calculateLength = () => trackLength(audioRef.current, channelRef.current, subtitlesRef.current);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (channel !== undefined) {\n                        channel.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            channel.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab, channel]\n    );\n\n    useEffect(() => {\n        if (!videoFileUrl && !tab) {\n            return;\n        }\n\n        let channel: VideoChannel;\n\n        if (videoFileUrl) {\n            const channelId = uuidv4();\n            channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n            setChannelId(channelId);\n        } else {\n            channel = new VideoChannel(new ChromeTabVideoProtocol(tab!.id, tab!.src, extension));\n            channel.init();\n        }\n\n        videoChannelRef.current = channel;\n        setChannel(channel);\n\n        return () => {\n            clock.setTime(0);\n            clock.stop();\n            setPlaying(false);\n            channel.close();\n        };\n    }, [clock, videoFileUrl, tab, extension, videoChannelRef]);\n\n    useEffect(() => {\n        async function init() {\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitlesSentThroughChannel(false);\n                    setSubtitles(subtitles);\n                    setPlayMode((playMode) => (!subtitles || subtitles.length === 0 ? PlayMode.normal : playMode));\n                } catch (e) {\n                    onError(e);\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n                setPlayMode(PlayMode.normal);\n            }\n        }\n\n        init().then(() => onLoaded());\n    }, [subtitleReader, playbackPreferences, onLoaded, onError, subtitleFiles, audioFileUrl, flattenSubtitleFiles]);\n\n    useEffect(() => {\n        setSubtitlesSentThroughChannel(false);\n    }, [channel]);\n\n    useEffect(() => {\n        setPlaying(false);\n        clock.setTime(0);\n        clock.stop();\n\n        if (audioRef.current) {\n            audioRef.current.pause();\n            audioRef.current.currentTime = 0;\n        }\n    }, [clock, audioFileUrl]);\n\n    useEffect(\n        () => channel?.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl)),\n        [channel, onUnloadVideo, videoFileUrl]\n    );\n    useEffect(() => channel?.onPopOutToggle(() => onVideoPopOut()), [channel, onVideoPopOut]);\n    useEffect(() => channel?.onHideSubtitlePlayerToggle(onHideSubtitlePlayer), [channel, onHideSubtitlePlayer]);\n    useEffect(() => channel?.onAppBarToggle(onAppBarToggle), [channel, onAppBarToggle]);\n    useEffect(() => channel?.onFullscreenToggle(onFullscreenToggle), [channel, onFullscreenToggle]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                return channel?.ready(trackLength(audioRef.current, channel, subtitles));\n            }),\n        [channel, subtitles]\n    );\n    useEffect(() => {\n        if (channel === undefined || subtitles === undefined || subtitlesSentThroughChannel) {\n            return;\n        }\n\n        return channel.onReady(() => {\n            setSubtitlesSentThroughChannel(true);\n\n            channel.subtitles(\n                subtitles,\n                flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n            );\n        });\n    }, [subtitles, channel, flattenSubtitleFiles, subtitleFiles, subtitlesSentThroughChannel]);\n    useEffect(\n        () => channel?.onReady(() => channel?.subtitleSettings(settingsProvider.subtitleSettings)),\n        [channel, settingsProvider]\n    );\n    useEffect(() => channel?.ankiSettings(settingsProvider.ankiSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.miscSettings(settingsProvider.miscSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.playMode(playMode), [channel, playMode]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                    setAudioTracks(channel?.audioTracks);\n                    setSelectedAudioTrack(channel?.selectedAudioTrack);\n                } else {\n                    setAudioTracks(undefined);\n                    setSelectedAudioTrack(undefined);\n                }\n            }),\n        [channel]\n    );\n    useEffect(\n        () =>\n            channel?.onReady((paused) => {\n                if (channel) {\n                    clock.setTime(channel.currentTime * 1000);\n                }\n\n                if (paused) {\n                    clock.stop();\n                } else {\n                    clock.start();\n                }\n\n                setPlaying(!paused);\n\n                if (channel?.playbackRate) {\n                    clock.rate = channel.playbackRate;\n                    setPlaybackRate(channel.playbackRate);\n                }\n            }),\n        [channel, clock]\n    );\n    useEffect(\n        () => channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(\n        () => channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(() => {\n        return channel?.onOffset((offset) => applyOffset(Math.max(-calculateLength() ?? 0, offset), false));\n    }, [channel, applyOffset]);\n    useEffect(() => channel?.onPlaybackRate(updatePlaybackRate), [channel, updatePlaybackRate]);\n    useEffect(\n        () =>\n            channel?.onCopy((subtitle, surroundingSubtitles, audio, image, url, postMineAction, id, mediaTimetamp) =>\n                onCopy(\n                    subtitle,\n                    surroundingSubtitles,\n                    audioFile,\n                    videoFile,\n                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                    mediaTimetamp,\n                    channel?.selectedAudioTrack,\n                    channel?.playbackRate,\n                    audio,\n                    image,\n                    url,\n                    postMineAction,\n                    id\n                )\n            ),\n        [channel, onCopy, audioFile, videoFile, subtitleFiles]\n    );\n    useEffect(\n        () =>\n            channel?.onPlayMode((playMode) => {\n                setPlayMode(playMode);\n                channel?.playMode(playMode);\n            }),\n        [channel, playMode]\n    );\n    useEffect(\n        () =>\n            channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await seek(currentTime * 1000, clock, forwardToMedia);\n\n                if (playing) {\n                    clock.start();\n                }\n            }),\n        [channel, clock, playing, seek]\n    );\n    useEffect(\n        () =>\n            channel?.onAudioTrackSelected(async (id) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await mediaAdapter.onReady();\n                if (playing) {\n                    clock.start();\n                }\n\n                setSelectedAudioTrack(id);\n            }),\n        [channel, clock, mediaAdapter, playing]\n    );\n    useEffect(() => channel?.onAnkiDialogRequest(() => onAnkiDialogRequest()), [channel, onAnkiDialogRequest]);\n    useEffect(\n        () =>\n            channel?.onToggleSubtitleTrackInList((track) =>\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                })\n            ),\n        [channel]\n    );\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playing) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter, playing]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const timestamp = clock.time(calculateLength());\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playing) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playing) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek, playing]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (playing) {\n                clock.stop();\n            }\n\n            await seek(progress * calculateLength(), clock, true);\n\n            if (playing) {\n                clock.start();\n            }\n        },\n        [clock, seek, playing]\n    );\n\n    const handleSeekToTimestamp = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playing) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter, playing]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            forceUseGivenSubtitle?: boolean\n        ) => {\n            if (videoFileUrl && !forceUseGivenSubtitle) {\n                // Let VideoPlayer do the copying to ensure copied subtitle is consistent with the VideoPlayer clock\n                channel?.copy(postMineAction);\n                return;\n            }\n\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(calculateLength()),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                undefined\n            );\n        },\n        [channel, onCopy, clock, audioFile, videoFile, videoFileUrl, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            channel?.audioTrackSelected(id);\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playing) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [channel, clock, mediaAdapter, seek, playing]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            const length = calculateLength();\n            applyOffset(Math.max(-length ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const progress = clock.progress(calculateLength());\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n            channel?.playMode(newPlayMode);\n        },\n        [channel, playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if (!videoFileUrl) {\n            return;\n        }\n\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else {\n                    onTakeScreenshot(clock.time(calculateLength()));\n                }\n            },\n            () => false\n        );\n    }, [videoFileUrl, clock, onTakeScreenshot, onAnkiDialogRewind, keyBinder, disableKeyEvents, ankiDialogOpen]);\n\n    useEffect(() => channel?.appBarToggle(appBarHidden), [channel, appBarHidden]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(() => channel?.fullscreenToggle(videoFullscreen), [channel, videoFullscreen]);\n\n    useEffect(() => {\n        if (rewindSubtitle?.start === undefined) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n        seek(rewindSubtitle.start, clock, true);\n    }, [clock, rewindSubtitle?.start, mediaAdapter, seek]);\n\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n\n                <Grid\n                    item\n                    style={{\n                        flexGrow: videoInWindow ? 0 : 1,\n                        width:\n                            videoInWindow && (hideSubtitlePlayer || !subtitles || subtitles?.length === 0) ? 0 : 'auto',\n                    }}\n                >\n                    {loaded && !(videoFileUrl && !videoPopOut) && (\n                        <Controls\n                            mousePositionRef={mousePositionRef}\n                            playing={playing}\n                            clock={clock}\n                            length={calculateLength()}\n                            displayLength={trackLength(audioRef.current, channel, subtitles, false)}\n                            audioTracks={audioTracks}\n                            selectedAudioTrack={selectedAudioTrack}\n                            tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                            selectedTab={tab}\n                            audioFile={audioFile?.name}\n                            videoFile={videoFile?.name}\n                            offsetEnabled={true}\n                            offset={offset}\n                            playbackRate={playbackRate}\n                            playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                            onPlaybackRateChange={handlePlaybackRateChange}\n                            volumeEnabled={Boolean(audioFileUrl)}\n                            playModeEnabled={playModeEnabled}\n                            playMode={playMode}\n                            onPlay={handlePlay}\n                            onPause={handlePause}\n                            onSeek={handleSeek}\n                            onAudioTrackSelected={handleAudioTrackSelected}\n                            onTabSelected={onTabSelected}\n                            onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                            onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                            onOffsetChange={handleOffsetChange}\n                            onVolumeChange={handleVolumeChange}\n                            onPlayMode={handlePlayMode}\n                            disableKeyEvents={disableKeyEvents}\n                            playbackPreferences={playbackPreferences}\n                            showOnMouseMovement={true}\n                        />\n                    )}\n                    <SubtitlePlayer\n                        playing={playing}\n                        subtitles={subtitles}\n                        subtitleCollection={subtitleCollection}\n                        clock={clock}\n                        length={calculateLength()}\n                        jumpToSubtitle={jumpToSubtitle}\n                        drawerOpen={drawerOpen}\n                        appBarHidden={appBarHidden}\n                        compressed={Boolean(videoFileUrl && !videoPopOut)}\n                        copyButtonEnabled={tab === undefined}\n                        loading={loadingSubtitles}\n                        displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                        disableKeyEvents={disableKeyEvents}\n                        lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                        hidden={videoInWindow && hideSubtitlePlayer}\n                        disabledSubtitleTracks={disabledSubtitleTracks}\n                        onSeek={handleSeekToTimestamp}\n                        onCopy={handleCopyFromSubtitlePlayer}\n                        onOffsetChange={handleOffsetChange}\n                        onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                        onSubtitlesSelected={handleSubtitlesSelected}\n                        autoPauseContext={autoPauseContext}\n                        settingsProvider={settingsProvider}\n                        keyBinder={keyBinder}\n                    />\n                </Grid>\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AsbplayerSettings,\n    AutoPausePreference,\n    KeyBindSet,\n    KeyBindName,\n    supportedLanguages,\n    computeStyles,\n} from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { useOutsideClickListener } from '../hooks/use-outside-click-listener';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n    verticallyCentered: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        marginLeft: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const { t } = useTranslation();\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useOutsideClickListener(\n        ref,\n        useCallback(() => {\n            if (editing) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        }, [editing, onKeysChange])\n    );\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = t('settings.recordingBind');\n    } else if (extensionOverridden) {\n        placeholder = t('settings.extensionOverriddenBind');\n    } else {\n        placeholder = t('settings.unboundBind');\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? t('settings.extensionShortcut') : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface AddCustomFieldProps {\n    onAddCustomField: (fieldName: string) => void;\n}\n\nfunction AddCustomField({ onAddCustomField }: AddCustomFieldProps) {\n    const { t } = useTranslation();\n    const [fieldName, setFieldName] = useState<string>('');\n\n    return (\n        <TextField\n            label={t('settings.addCustomField')}\n            fullWidth\n            value={fieldName}\n            color=\"secondary\"\n            onChange={(e) => setFieldName(e.target.value)}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            disabled={fieldName.trim() === ''}\n                            onClick={() => {\n                                onAddCustomField(fieldName.trim());\n                                setFieldName('');\n                            }}\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const keyBindProperties = useMemo<{ [key in KeyBindName]: KeyBindProperties }>(\n        () => ({\n            copySubtitle: { label: t('binds.copySubtitle')!, extensionOverridden: true },\n            ankiExport: { label: t('binds.ankiExport')!, extensionOverridden: true },\n            updateLastCard: {\n                label: t('binds.updateLastCard')!,\n                extensionOverridden: true,\n            },\n            takeScreenshot: {\n                label: t('binds.takeScreenshot')!,\n                extensionOverridden: true,\n            },\n            togglePlay: { label: t('binds.togglePlay')!, extensionOverridden: false },\n            toggleAutoPause: { label: t('binds.toggleAutoPause')!, extensionOverridden: false },\n            toggleCondensedPlayback: { label: t('binds.toggleCondensedPlayback')!, extensionOverridden: false },\n            toggleSubtitles: { label: t('binds.toggleSubtitles')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack1: { label: t('binds.toggleVideoSubtitleTrack1')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack2: { label: t('binds.toggleVideoSubtitleTrack2')!, extensionOverridden: false },\n            toggleAsbplayerSubtitleTrack1: {\n                label: t('binds.toggleAsbplayerSubtitleTrack1')!,\n                extensionOverridden: false,\n            },\n            toggleAsbplayerSubtitleTrack2: {\n                label: t('binds.toggleAsbplayerSubtitleTrack2')!,\n                extensionOverridden: false,\n            },\n            seekBackward: { label: t('binds.seekBackward')!, extensionOverridden: false },\n            seekForward: { label: t('binds.seekForward')!, extensionOverridden: false },\n            seekToPreviousSubtitle: { label: t('binds.seekToPreviousSubtitle')!, extensionOverridden: false },\n            seekToNextSubtitle: { label: t('binds.seekToNextSubtitle')!, extensionOverridden: false },\n            seekToBeginningOfCurrentSubtitle: {\n                label: t('binds.seekToBeginningOfCurrentSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToPreviousSubtitle: {\n                label: t('binds.adjustOffsetToPreviousSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToNextSubtitle: {\n                label: t('binds.adjustOffsetToNextSubtitle')!,\n                extensionOverridden: false,\n            },\n            increaseOffset: { label: t('binds.increaseOffset')!, extensionOverridden: false },\n            decreaseOffset: { label: t('binds.decreaseOffset')!, extensionOverridden: false },\n            resetOffset: { label: t('binds.resetOffset')!, extensionOverridden: false },\n            increasePlaybackRate: { label: t('binds.increasePlaybackRate')!, extensionOverridden: false },\n            decreasePlaybackRate: { label: t('binds.decreasePlaybackRate')!, extensionOverridden: false },\n        }),\n        [t]\n    );\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [preCacheSubtitleDom, setPreCacheSubtitleDom] = useState<boolean>(settings.preCacheSubtitleDom);\n\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [miningHistoryStorageLimit, setMiningHistoryStorageLimit] = useState<number>(\n        settings.miningHistoryStorageLimit\n    );\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n    const [language, setLanguage] = useState<string>(settings.language);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handlePreCacheSubtitleDomChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setPreCacheSubtitleDom(e.target.checked),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleMiningHistoryStorageLimit = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setMiningHistoryStorageLimit(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n    const handleLanguage = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setLanguage(e.target.value as string),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor,\n                subtitleSize,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundOpacity,\n                subtitleBackgroundColor,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            preCacheSubtitleDom: preCacheSubtitleDom,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            miningHistoryStorageLimit: miningHistoryStorageLimit,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n            language: language,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        preCacheSubtitleDom,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        miningHistoryStorageLimit,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n        language,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n    const origin = `${window.location.protocol}//${window.location.hostname}`;\n    return (\n        <React.Fragment>\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>{t('settings.title')}</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>{t('settings.anki')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label={t('settings.ankiConnectUrl')}\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <Trans\n                                        i18nKey={'settings.corsHelperText'}\n                                        values={{ origin }}\n                                        components={[\n                                            <Link\n                                                color=\"secondary\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                                href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                            >\n                                                video\n                                            </Link>,\n                                        ]}\n                                    ></Trans>\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label={t('settings.deck')}\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.noteType')}\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sentenceField')}\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.definitionField')}\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.wordField')}\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.audioField')}\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.imageField')}\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sourceField')}\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.urlField')}\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <AddCustomField onAddCustomField={handleAddCustomField} />\n                                <TagsTextField\n                                    label={t('settings.tags')}\n                                    helperText={t('settings.tagsHelperText')}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>{t('settings.mining')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label={t('settings.mp3Preference')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label={t('settings.copyOnMine')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingStart')}\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingEnd')}\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageWidth')}\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageHeight')}\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesCountRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesTimeRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={preCacheSubtitleDom}\n                                            onChange={handlePreCacheSubtitleDomChange}\n                                        />\n                                    }\n                                    label={\n                                        <Grid container direction=\"row\" spacing={1}>\n                                            <Grid item className={classes.verticallyCentered}>\n                                                {t('settings.preCacheSubtitleDom')}\n                                            </Grid>\n                                            <Grid item className={classes.verticallyCentered}>\n                                                <Tooltip\n                                                    title={t('settings.preCacheSubtitleDomHelperText')!}\n                                                    placement=\"top\"\n                                                >\n                                                    <InfoIcon />\n                                                </Tooltip>\n                                            </Grid>\n                                        </Grid>\n                                    }\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>{t('settings.misc')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label={t('settings.rememberSubtitleOffset')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label={t('settings.autoCopy')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.miningHistoryStorageLimit')}\n                                    fullWidth\n                                    value={miningHistoryStorageLimit}\n                                    color=\"secondary\"\n                                    onChange={handleMiningHistoryStorageLimit}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilter')}\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilterTextReplacement')}\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                                <TextField\n                                    select\n                                    label={t('settings.language')}\n                                    value={language}\n                                    color=\"secondary\"\n                                    onChange={handleLanguage}\n                                >\n                                    {supportedLanguages.map((s) => (\n                                        <MenuItem key={s} value={s}>\n                                            {s}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>{t('settings.autoPausePreference')}</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip title={t('settings.autoPausePreferenceHelperText')!} placement=\"top\">\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleStart')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleEnd')}\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>{t('settings.subtitleAppearance')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleColor')}\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleSize')}\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleOutlineColor')}\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleOutlineThickness')}\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleBackgroundColor')}\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleBackgroundOpacity')}\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label={t('settings.subtitleFontFamily')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.imageBasedSubtitleScaleFactor')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>{t('settings.theme')}</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeLight')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeDark')}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>{t('settings.keyboardShortcuts')}</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>{t('action.ok')}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { RefObject, useEffect } from 'react';\n\nexport const useOutsideClickListener = (ref: RefObject<HTMLElement>, handler: (event: MouseEvent) => void) => {\n    useEffect(() => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!ref.current?.contains(event.target as Node)) {\n                handler(event);\n            }\n        };\n        window.document.addEventListener('click', clickHandler);\n        return () => window.document.removeEventListener('click', clickHandler);\n    }, [ref, handler]);\n};\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './cached-local-storage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    resetOffset: { keys: isMacOs ? '⇧+⌃+down' : 'ctrl+shift+down' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    takeScreenshot: { keys: isMacOs ? '⇧+⌃+V' : 'ctrl+shift+V' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\nconst defaultMiningHistoryStorageLimit = 25;\nconst defaultPreCacheSubtitleDom = false;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst preCacheSubtitleDomKey = 'preCacheSubtitleDom';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\nconst miningHistoryStorageLimitKey = 'miningHistoryStorageLimit';\nconst languageKey = 'i18nextLng';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            preCacheSubtitleDom: this.preCacheSubtitleDom,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.preCacheSubtitleDom = newSettings.preCacheSubtitleDom;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.miningHistoryStorageLimit = newSettings.miningHistoryStorageLimit;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n        this.language = newSettings.language;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n            preCacheSubtitleDom: this.preCacheSubtitleDom,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get preCacheSubtitleDom() {\n        return this._storage.get(preCacheSubtitleDomKey) === 'true' || defaultPreCacheSubtitleDom;\n    }\n\n    set preCacheSubtitleDom(preCacheSubtitleDom) {\n        this._storage.set(preCacheSubtitleDomKey, String(preCacheSubtitleDom));\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n\n    get miningHistoryStorageLimit() {\n        return this._getNumberItem(miningHistoryStorageLimitKey, defaultMiningHistoryStorageLimit);\n    }\n\n    set miningHistoryStorageLimit(miningHistoryStorageLimit: number) {\n        this._storage.set(miningHistoryStorageLimitKey, String(miningHistoryStorageLimit));\n    }\n\n    get language() {\n        return this._storage.get(languageKey) ?? 'en';\n    }\n\n    set language(language: string) {\n        this._storage.set(languageKey, language);\n    }\n}\n","import { SubtitleModel } from '../../src/model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from '../../src/settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.takeScreenshot.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onTakeScreenshot, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    takeScreenshotHandler(onTakeScreenshot: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onTakeScreenshot(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindBack: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (backShortcut) {\n            unbindBack = this._bind(backShortcut, capture, backHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindBack?.();\n            unbindNext?.();\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        const unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        const unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        return () => {\n            unbindDecrease();\n            unbindIncrease();\n        };\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean | undefined\n    ) {\n        const shortcut = this.keyBindSet.resetOffset.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onResetOffset(event);\n        };\n\n        return this._bind(shortcut, capture ?? false, handler);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n        let unbindDecrease: (() => void) | undefined;\n        let unbindIncrease: (() => void) | undefined;\n\n        if (decreaseShortcut) {\n            unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        }\n\n        return () => {\n            unbindDecrease?.();\n            unbindIncrease?.();\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            unbindHandlers.push(this._bind(shortcuts[i], capture, handler));\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            const unbindHandler = this._bind(shortcuts[i], capture, handler);\n            unbindHandlers.push(unbindHandler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindCondensedPlayback(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    private _bind(shortcut: string, capture: boolean, handler: (event: KeyboardEvent) => void) {\n        const wrappedHandler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                handler(event);\n            } else if (event.type === 'keyup') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n        hotkeys(shortcut, { capture, keydown: true, keyup: true }, wrappedHandler);\n        return () => hotkeys.unbind(shortcut, wrappedHandler);\n    }\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n    private copyCallbacks: ((postMineAction: PostMineAction) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n        this.copyCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                case 'copy':\n                    const copyMessage = event.data as CopyToVideoMessage;\n\n                    for (const callback of that.copyCallbacks) {\n                        callback(copyMessage.postMineAction);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n        return () => this._remove(callback, this.closeCallbacks);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitlesCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitleSettingsCallbacks);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.miscSettingsCallbacks);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiSettingsCallbacks);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n        return () => this._remove(callback, this.alertCallbacks);\n    }\n\n    onCopy(callback: (postMineAction: PostMineAction) => void) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        mediaTimestamp: number,\n        postMineAction: PostMineAction\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            postMineAction: postMineAction,\n            mediaTimestamp,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n            this.copyCallbacks = [];\n        }\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import { CopySubtitleMessage, PostMineAction, SubtitleModel } from '@project/common';\nimport { DefaultKeyBinder, KeyBinder } from '@project/common/key-binder';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly takeScreenshotHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n            } else if (message.data.command === 'take-screenshot') {\n                handlers = this.takeScreenshotHandlers;\n            }\n\n            if (handlers !== undefined) {\n                for (const h of handlers) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.takeScreenshotHandler(onTakeScreenshot, disabledGetter);\n            this.takeScreenshotHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.takeScreenshotHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindTakeScreenshot(onTakeScreenshot, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindResetOffet(onResetOffset, disabledGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { MutableRefObject, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { arrayEquals } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    AnkiSettings,\n    AutoPausePreference,\n    AutoPauseContext,\n    computeStyles,\n    computeStyleString,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { DefaultKeyBinder } from '@project/common/key-binder';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/player-channel';\nimport SettingsProvider from '../services/settings-provider';\nimport AppKeyBinder from '../services/app-key-binder';\nimport ChromeExtension from '../services/chrome-extension';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\nimport { i18n } from './i18n';\nimport { useSubtitleDomCache } from '../hooks/use-subtitle-dom-cache';\nimport './video-player.css';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 2:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 3:\n            error = 'MEDIA_ERR_DECODE';\n            break;\n        case 4:\n            error = 'MEDIA_ERR_SRC_NOT_SUPPORTED';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nconst showingSubtitleHtml = (\n    subtitle: IndexedSubtitleModel,\n    videoRef: MutableRefObject<ExperimentalHTMLVideoElement | undefined>,\n    subtitleStyles: string,\n    imageBasedSubtitleScaleFactor: number\n) => {\n    if (subtitle.textImage) {\n        const imageScale =\n            (imageBasedSubtitleScaleFactor * (videoRef.current?.width ?? window.screen.availWidth)) /\n            subtitle.textImage.screen.width;\n        const width = imageScale * subtitle.textImage.image.width;\n\n        return `\n<div style=\"max-width:${width}px;\">\n<img\n    style=\"width:100%;\"\n    alt=\"subtitle\"\n    src=\"${subtitle.textImage.dataUrl}\"\n/>\n</div>\n`;\n    }\n\n    return `<span style=\"${subtitleStyles}\">${subtitle.text}</span>`;\n};\n\ninterface ShowingSubtitleProps {\n    subtitle: IndexedSubtitleModel;\n    videoRef: MutableRefObject<ExperimentalHTMLVideoElement | undefined>;\n    subtitleStyles: any;\n    imageBasedSubtitleScaleFactor: number;\n}\n\nconst ShowingSubtitle = ({\n    subtitle,\n    videoRef,\n    subtitleStyles,\n    imageBasedSubtitleScaleFactor,\n}: ShowingSubtitleProps) => {\n    let content;\n\n    if (subtitle.textImage) {\n        content = (\n            <SubtitleTextImage\n                availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                subtitle={subtitle}\n                scale={imageBasedSubtitleScaleFactor}\n            />\n        );\n    } else {\n        content = <span style={subtitleStyles}>{subtitle.text}</span>;\n    }\n\n    return <div>{content}</div>;\n};\n\nexport interface SeekRequest {\n    timestamp: number;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\ninterface MinedRecord {\n    videoFileUrl: string;\n    videoFileName: string;\n    selectedAudioTrack: string | undefined;\n    playbackRate: number;\n    subtitle: SubtitleModel;\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    seekRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n    onAnkiDialogRewind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const [subtitleAlignment, setSubtitleAlignment] = useState<SubtitleAlignment>(\n        playbackPreferences.subtitleAlignment\n    );\n    const [subtitlePositionOffset, setSubtitlePositionOffset] = useState<number>(\n        playbackPreferences.subtitlePositionOffset\n    );\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const [lastMinedRecord, setLastMinedRecord] = useState<MinedRecord>();\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n\n    useEffect(() => {\n        if (i18n.language !== miscSettings.language) {\n            i18n.changeLanguage(miscSettings.language);\n        }\n    }, [miscSettings]);\n\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            setShowSubtitles([]);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    useEffect(() => {\n        if (seekRequest !== undefined) {\n            handleSeek(seekRequest.timestamp / length);\n        }\n    }, [handleSeek, seekRequest, length]);\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                handleOffsetChange(0);\n            },\n            () => false\n        );\n    }, [keyBinder, handleOffsetChange]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            const currentSubtitle = {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n\n            return { currentSubtitle, surroundingSubtitles: mockSurroundingSubtitles(currentSubtitle, length, 5000) };\n        } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n            const currentSubtitle = showSubtitlesRef.current[0];\n            return { currentSubtitle, surroundingSubtitles: calculateSurroundingSubtitles(currentSubtitle.index) };\n        }\n\n        return undefined;\n    }, [subtitles, calculateSurroundingSubtitles, length, clock]);\n\n    const mineSubtitle = useCallback(\n        (\n            postMineAction: PostMineAction,\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            switch (postMineAction) {\n                case PostMineAction.showAnkiDialog:\n                    if (popOut) {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.none);\n                        onAnkiDialogRequest(\n                            videoFileUrl,\n                            videoFileName ?? '',\n                            selectedAudioTrack,\n                            playbackRate,\n                            subtitle,\n                            surroundingSubtitles,\n                            timestamp\n                        );\n\n                        if (playing) {\n                            playerChannel.pause();\n                            setResumeOnFinishedAnkiDialogRequest(true);\n                        }\n                    } else {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.showAnkiDialog);\n                    }\n                    break;\n                default:\n                    playerChannel.copy(subtitle, surroundingSubtitles, timestamp, postMineAction);\n            }\n\n            setLastMinedRecord({\n                videoFileUrl,\n                videoFileName: videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                subtitle,\n                surroundingSubtitles,\n                timestamp,\n            });\n        },\n        [onAnkiDialogRequest, playerChannel, playing, popOut]\n    );\n\n    const mineCurrentSubtitle = useCallback(\n        (postMineAction: PostMineAction) => {\n            const extracted = extractSubtitles();\n\n            if (extracted === undefined) {\n                return;\n            }\n\n            const { currentSubtitle, surroundingSubtitles } = extracted;\n            mineSubtitle(\n                postMineAction,\n                videoFile,\n                videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                currentSubtitle,\n                surroundingSubtitles,\n                clock.time(length)\n            );\n        },\n        [mineSubtitle, extractSubtitles, clock, length, playbackRate, selectedAudioTrack, videoFile, videoFileName]\n    );\n\n    useEffect(() => {\n        return playerChannel.onCopy(mineCurrentSubtitle);\n    }, [playerChannel, mineCurrentSubtitle]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.showAnkiDialog);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.updateLastCard);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (popOut && ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else if (lastMinedRecord) {\n                    const currentTimestamp = clock.time(length);\n                    mineSubtitle(\n                        PostMineAction.showAnkiDialog,\n                        lastMinedRecord.videoFileUrl,\n                        lastMinedRecord.videoFileName,\n                        lastMinedRecord.selectedAudioTrack,\n                        lastMinedRecord.playbackRate,\n                        lastMinedRecord.subtitle,\n                        lastMinedRecord.surroundingSubtitles,\n                        currentTimestamp\n                    );\n                }\n            },\n            () => false\n        );\n    }, [clock, length, keyBinder, lastMinedRecord, mineSubtitle, popOut, ankiDialogOpen, onAnkiDialogRewind]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                mineCurrentSubtitle(PostMineAction.none);\n            },\n            () => false,\n            () => {\n                const extracted = extractSubtitles();\n\n                if (extracted === undefined) {\n                    return undefined;\n                }\n\n                return extracted.currentSubtitle;\n            }\n        );\n    }, [extractSubtitles, mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleSubtitleAlignment = useCallback(\n        (alignment: SubtitleAlignment) => {\n            setSubtitleAlignment(alignment);\n            playbackPreferences.subtitleAlignment = alignment;\n        },\n        [playbackPreferences]\n    );\n\n    useEffect(() => {\n        const onWheel = (event: WheelEvent) => {\n            if (!subtitlesEnabled || !showSubtitlesRef.current?.length) {\n                return;\n            }\n\n            if (Math.abs(event.deltaY) < 10) {\n                return;\n            }\n\n            let shouldIncreaseOffset: boolean;\n\n            switch (subtitleAlignment) {\n                case SubtitleAlignment.bottom:\n                    shouldIncreaseOffset = event.deltaY > 0;\n                    break;\n                case SubtitleAlignment.top:\n                    shouldIncreaseOffset = event.deltaY < 0;\n                    break;\n            }\n\n            setSubtitlePositionOffset((offset) => {\n                const newOffset = shouldIncreaseOffset ? --offset : ++offset;\n                playbackPreferences.subtitlePositionOffset = newOffset;\n                return newOffset;\n            });\n        };\n\n        window.addEventListener('wheel', onWheel);\n        return () => window.removeEventListener('wheel', onWheel);\n    }, [subtitleAlignment, subtitlesEnabled, playbackPreferences]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    const subtitleStylesString = useMemo(\n        () =>\n            computeStyleString({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const { getSubtitleDomCache } = useSubtitleDomCache(\n        subtitles,\n        useCallback(\n            (subtitle) => showingSubtitleHtml(subtitle, videoRef, subtitleStylesString, imageBasedSubtitleScaleFactor),\n            [subtitleStylesString, imageBasedSubtitleScaleFactor]\n        )\n    );\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div\n                    style={\n                        subtitleAlignment === SubtitleAlignment.bottom\n                            ? { bottom: subtitlePositionOffset }\n                            : { top: subtitlePositionOffset }\n                    }\n                    className={classes.subtitleContainer}\n                >\n                    {showSubtitles.map((subtitle, index) => {\n                        if (miscSettings.preCacheSubtitleDom) {\n                            const domCache = getSubtitleDomCache();\n                            return (\n                                <div\n                                    key={index}\n                                    ref={(ref) => {\n                                        if (!ref) {\n                                            return;\n                                        }\n\n                                        while (ref.firstChild) {\n                                            domCache.return(ref.lastChild! as HTMLElement);\n                                        }\n\n                                        ref.appendChild(domCache.get(String(subtitle.index)));\n                                    }}\n                                />\n                            );\n                        }\n\n                        return (\n                            <ShowingSubtitle\n                                key={index}\n                                subtitle={subtitle}\n                                subtitleStyles={subtitleStyles}\n                                videoRef={videoRef}\n                                imageBasedSubtitleScaleFactor={imageBasedSubtitleScaleFactor}\n                            />\n                        );\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n                subtitleAlignment={subtitleAlignment}\n                subtitleAlignmentEnabled={true}\n                onSubtitleAlignment={handleSubtitleAlignment}\n            />\n        </div>\n    );\n}\n","import { OffscreenDomCache, SubtitleModel } from '@project/common';\nimport { useEffect, useState } from 'react';\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport const useSubtitleDomCache = (\n    subtitles: IndexedSubtitleModel[],\n    render: (subtitle: IndexedSubtitleModel) => string\n) => {\n    const [domCache, setDomCache] = useState<OffscreenDomCache>(new OffscreenDomCache());\n\n    useEffect(() => {\n        const domCache = new OffscreenDomCache();\n        setDomCache(domCache);\n        return () => domCache.clear();\n    }, [subtitles, render]);\n\n    return {\n        getSubtitleDomCache: () => {\n            if (domCache.empty) {\n                for (const subtitle of subtitles) {\n                    domCache.add(String(subtitle.index), render(subtitle));\n                }\n            }\n\n            return domCache;\n        },\n    };\n};\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from '../services/chrome-extension';\nimport { useEffect, useState } from 'react';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n    'take-screenshot': 'takeScreenshot',\n};\n\nconst initialExtension = new ChromeExtension();\nlet realExtension: ChromeExtension | undefined;\n\nconst listenForVersion = (callback: (extension: ChromeExtension) => void) => {\n    const versionListener = (event: MessageEvent) => {\n        if (event.source !== window) {\n            return;\n        }\n\n        if (event.data.sender === 'asbplayer-extension-to-player') {\n            if (event.data.message.command === 'version') {\n                const message = event.data.message as ExtensionVersionMessage;\n                const translatedCommands: { [key: string]: string | undefined } = {};\n                const extensionCommands = message.extensionCommands ?? {};\n\n                for (const extensionCommandName of Object.keys(extensionCommands)) {\n                    translatedCommands[keyBindNameMap[extensionCommandName]] = extensionCommands[extensionCommandName];\n                }\n\n                callback(new ChromeExtension(message.version, translatedCommands));\n            }\n        }\n    };\n\n    window.addEventListener('message', versionListener);\n\n    return () => {\n        window.removeEventListener('message', versionListener);\n    };\n};\n\nconst unbindInitialListener = listenForVersion((extension) => (realExtension = extension));\n\nexport const useChromeExtension = () => {\n    const [extension, setExtension] = useState<ChromeExtension>(initialExtension);\n\n    useEffect(() => {\n        if (realExtension) {\n            setExtension(realExtension);\n        } else {\n            unbindInitialListener();\n            return listenForVersion(setExtension);\n        }\n    }, []);\n\n    return extension;\n};\n","import { AudioModel, ImageModel, SubtitleModel } from '@project/common';\nimport Dexie from 'dexie';\nimport { CopyHistoryItem } from '../components/CopyHistory';\n\nclass CopyHistoryDatabase extends Dexie {\n    copyHistoryItems!: Dexie.Table<CopyHistoryRecord, number>;\n\n    constructor() {\n        super('CopyHistoryDatabase');\n        this.version(1).stores({\n            copyHistoryItems: '++index,id,timestamp',\n        });\n    }\n}\n\ninterface CopyHistoryRecord extends SubtitleModel {\n    index?: number;\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioTrack?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    videoFileName?: string;\n    audioFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\nexport default class CopyHistoryRepository {\n    private readonly _db = new CopyHistoryDatabase();\n    private _limit: number;\n\n    constructor(limit: number) {\n        this._limit = limit;\n    }\n\n    set limit(limit: number) {\n        this._limit = limit;\n    }\n\n    async fetch(count: number): Promise<CopyHistoryItem[]> {\n        if (count <= 0) {\n            return [];\n        }\n\n        const result = await await this._db.copyHistoryItems.reverse().limit(count).toArray();\n        result.reverse();\n        return result;\n    }\n\n    async save(item: CopyHistoryItem) {\n        if (this._limit <= 0) {\n            return;\n        }\n\n        const {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFile,\n            audioFile,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        } = item;\n        const record = {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFileName: videoFile?.name,\n            audioFileName: audioFile?.name,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        };\n        const index = await this._db.copyHistoryItems.put(record);\n        await this._prune(index);\n    }\n\n    private async _prune(lastIndex: number) {\n        const size = await this._db.copyHistoryItems.count();\n\n        if (size > this._limit) {\n            const keys = await this._db.copyHistoryItems\n                .where('index')\n                .belowOrEqual(lastIndex - this._limit)\n                .primaryKeys();\n\n            if (keys.length > 0) {\n                await this._db.copyHistoryItems.bulkDelete(keys);\n            }\n        }\n    }\n\n    async delete(id: string) {\n        const keys = await this._db.copyHistoryItems.where('id').equals(id).primaryKeys();\n        await this._db.copyHistoryItems.bulkDelete(keys);\n    }\n}\n","export default class LocalizedError extends Error {\n    private readonly key: string;\n    private readonly params: { [key: string]: string };\n\n    constructor(key: string, params: { [key: string]: string } = {}) {\n        super(key);\n        this.key = key;\n        this.params = params;\n    }\n\n    get locKey() {\n        return this.key;\n    }\n\n    get locParams() {\n        return this.params;\n    }\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    Command,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    SharedGlobalSettings,\n    SharedSettingsUpdatedMessage,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer,\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishSharedGlobalSettings(settings: SharedGlobalSettings) {\n        const command: Command<SharedSettingsUpdatedMessage> = {\n            sender: 'asbplayerv2',\n            message: {\n                command: 'shared-settings-updated',\n                settings: {\n                    language: settings.language,\n                    themeType: settings.themeType,\n                },\n            },\n        };\n        window.postMessage(command, '*');\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { i18n, useI18nInitialized } from './i18n';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/subtitle-reader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/chrome-extension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/settings-provider';\nimport VideoPlayer, { SeekRequest } from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/key-binder';\nimport AppKeyBinder from '../services/app-key-binder';\nimport VideoChannel from '../services/video-channel';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport CopyHistoryRepository from '../services/copy-history-repository';\nimport './i18n';\nimport { useTranslation } from 'react-i18next';\nimport LocalizedError from './localized-error';\nimport { useChromeExtension } from '../hooks/use-chrome-extension';\n\nconst latestExtensionVersion = '0.27.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new LocalizedError('error.unknownExtension', { fileName: f.name });\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new LocalizedError('error.onlyOneVideoFile');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new LocalizedError('error.onlyOneAudioFile');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new LocalizedError('error.unsupportedExtension', { extension });\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new LocalizedError('error.bothAudioAndVideNotAllowed');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFileName!,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    const calculateInterval = () => {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return [start, end];\n    };\n\n    if (item.audioFile || item.videoFile) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    if (item.audioFileName || item.videoFileName) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromMissingFile((item.audioFileName || item.videoFileName)!, start, end);\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFileName!, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    if (item.videoFileName) {\n        return Image.fromMissingFile(item.videoFileName, item.mediaTimestamp ?? item.start);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFileName ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({ searchParams, ...props }: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return <VideoPlayer videoFile={videoFile} channel={channel} popOut={popOut} {...props} />;\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const { t } = useTranslation();\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter, 'g');\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extension = useChromeExtension();\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [videoPlayerSeekRequest, setVideoPlayerSeekRequest] = useState<SeekRequest>();\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const copyHistoryRepository = useMemo(\n        () => new CopyHistoryRepository(settingsProvider.miningHistoryStorageLimit),\n        [settingsProvider]\n    );\n    useEffect(() => {\n        copyHistoryRepository.limit = settingsProvider.miningHistoryStorageLimit;\n    }, [copyHistoryRepository, settingsProvider.miningHistoryStorageLimit]);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback(\n        (message: any) => {\n            console.error(message);\n\n            setAlertSeverity('error');\n\n            if (message instanceof LocalizedError) {\n                setAlert(t(message.locKey, message.locParams) ?? '<failed to localize error>');\n            } else if (message instanceof Error) {\n                setAlert(message.message);\n            } else if (typeof message === 'string') {\n                setAlert(message);\n            } else {\n                setAlert(String(message));\n            }\n\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.exportedCard', { result })!);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.updatedCard', { result })!);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                handleError(e);\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError, t]\n    );\n\n    const handleTakeScreenshot = useCallback(\n        (mediaTimestamp: number) => {\n            if (sources.videoFile === undefined || copiedSubtitles.length === 0) {\n                return;\n            }\n\n            const lastCopyHistoryItem = copiedSubtitles[copiedSubtitles.length - 1];\n            const newCopyHistoryItem = {\n                ...lastCopyHistoryItem,\n                id: uuidv4(),\n                image: undefined,\n                videoFile: sources.videoFile,\n                mediaTimestamp,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => [...copiedSubtitles, newCopyHistoryItem]);\n            copyHistoryRepository.save(newCopyHistoryItem);\n            handleAnkiDialogRequest(newCopyHistoryItem);\n        },\n        [sources.videoFile, copiedSubtitles, handleAnkiDialogRequest, copyHistoryRepository]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName ?? subtitleFile?.name ?? videoFile?.name ?? audioFile?.name ?? '',\n                subtitleFileName: subtitleFile?.name,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === ''\n                        ? t('info.savedTimestamp', { timestamp: humanReadableTime(subtitle.start) })!\n                        : t('info.copiedSubtitle', { text: subtitle.text })!\n                );\n                setAlertOpen(true);\n            }\n\n            copyHistoryRepository.save(newCopiedSubtitle);\n        },\n        [fileName, settingsProvider, copyHistoryRepository, handleAnkiDialogProceed, handleAnkiDialogRequest, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return;\n        }\n\n        (async () => {\n            setCopiedSubtitles(await copyHistoryRepository.fetch(settingsProvider.miningHistoryStorageLimit));\n        })();\n    }, [inVideoPlayer, copyHistoryRepository, settingsProvider]);\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n        setHideSubtitlePlayer(false);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n\n            if (i18n.language !== settingsProvider.language) {\n                i18n.changeLanguage(settingsProvider.language);\n            }\n\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n            extension.publishSharedGlobalSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen, extension]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n            copyHistoryRepository.delete(item.id);\n        },\n        [copiedSubtitles, copyHistoryRepository]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFileName)) {\n                handleError(t('error.subtitleFileNotOpen', { fileName: item.subtitleFileName }));\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError, t]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFileName)) {\n            handleError(t('error.subtitleFileNotOpen', { fileName: ankiDialogItem.subtitleFileName }));\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError, t]);\n\n    const handleAnkiDialogRewindFromVideoPlayer = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setVideoPlayerSeekRequest({ timestamp: subtitle.start });\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, handleAnkiDialogCancel]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError(t('error.lostTabConnection', { tabName: tab!.id + ' ' + tab!.title }));\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError, t]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError(t('error.onlyOneDirectoryAllowed'));\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError(t('error.failedToLoadDirectory'));\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError(t('error.subdirectoriesNotAllowed'));\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, handleFiles, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            } else if (message.data.command === 'open-asbplayer-settings') {\n                setSettingsDialogOpen(true);\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback(\n        (oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n            switch (newPlayMode) {\n                case PlayMode.autoPause:\n                    setAlert(t('info.enabledAutoPause')!);\n                    break;\n                case PlayMode.condensed:\n                    setAlert(t('info.enabledCondensedPlayback')!);\n                    break;\n                case PlayMode.normal:\n                    if (oldPlayMode === PlayMode.autoPause) {\n                        setAlert(t('info.disabledAutoPause')!);\n                    } else if (oldPlayMode === PlayMode.condensed) {\n                        setAlert(t('info.disabledCondensedPlayback')!);\n                    }\n                    break;\n            }\n\n            setAlertSeverity('info');\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError(t('error.videoPlayerDragAndDropNotAllowed'));\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen, t]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    const handleCopyToClipboard = useCallback((blob: Blob) => {\n        navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]).catch(console.error);\n    }, []);\n\n    const { i18nInitialized } = useI18nInitialized();\n\n    if (!i18nInitialized) {\n        return null;\n    }\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    ankiDialogOpen={ankiDialogOpen}\n                                    seekRequest={videoPlayerSeekRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onAnkiDialogRewind={handleAnkiDialogRewindFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n                                        {nothingLoaded && (\n                                            <LandingPage\n                                                latestExtensionVersion={latestExtensionVersion}\n                                                extensionUrl={extensionUrl}\n                                                extension={extension}\n                                                loading={loading}\n                                                dragging={dragging}\n                                                appBarHidden={appBarHidden}\n                                                onFileSelector={handleFileSelector}\n                                            />\n                                        )}\n                                        <DragOverlay\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            loading={loading}\n                                        />\n                                    </div>\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAnkiDialogRewind={handleAnkiDialogRewind}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        onTakeScreenshot={handleTakeScreenshot}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                        ankiDialogOpen={ankiDialogOpen}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}