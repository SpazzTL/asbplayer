{"version":3,"sources":["../../node_modules/@project/common/locales lazy /^/.//.*/.json$/ groupOptions: {} namespace object","components/i18n.ts","hooks/use-window-size.ts","../../common/src/mp3-encoder.ts","../../common/src/mp3-encoder-worker.js","../../common/src/util.ts","../../common/src/audio-clip.ts","../../common/src/image-transformer.ts","../../common/src/image.ts","../../common/src/fetcher.ts","../../common/src/anki.ts","../../common/src/model.ts","../../common/src/auto-pause-context.ts","../../common/index.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/subtitle-reader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","../../common/subtitle-collection/src/subtitle-collection.ts","services/playback-preferences.ts","services/broadcast-channel-video-protocol.ts","services/chrome-tab-video-protocol.ts","services/clock.ts","services/cached-local-storage.ts","components/Controls.tsx","services/media-adapter.ts","components/SubtitlePlayer.tsx","services/video-channel.ts","components/Player.tsx","components/SettingsDialog.tsx","hooks/use-outside-click-listener.ts","services/settings-provider.ts","../../common/key-binder/src/key-binder.ts","services/player-channel.ts","services/app-key-binder.ts","components/VideoPlayer.tsx","hooks/use-chrome-extension.ts","services/copy-history-repository.ts","components/localized-error.ts","services/chrome-extension.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","t","keys","Object","module","exports","i18nInit","i18n","use","LanguageDetector","resourcesToBackend","language","initReactI18next","init","partialBundledLanguages","resources","fallbackLng","debug","process","ns","defaultNS","interpolation","escapeValue","detection","order","lookupLocalStorage","caches","useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Mp3Encoder","blob","workerFactory","reject","a","reader","FileReader","onload","audioContext","AudioContext","target","decodeAudioData","result","audioBuffer","channels","i","numberOfChannels","push","getChannelData","worker","postMessage","command","length","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","Math","floor","round","minutes","hours","String","padStart","surroundingSubtitles","subtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","forward","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","start","originalStart","end","afterTimestamp","min","text","originalEnd","track","beforeTimestamp","max","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","subtitle","interval","overlapStart","joinSubtitles","filter","s","trim","join","extractText","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","defaultMp3WorkerFactory","recorderConfiguration","AUDIO_TYPES","MediaRecorder","isTypeSupported","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","this","_blob","stopAudio","clearTimeout","undefined","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","isPlayable","MissingFileAudioData","fileName","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","resizeCanvas","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","MissingFileImageData","Image","available","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","PostMineAction","AutoPausePreference","PlayMode","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","supportedLanguages","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onCancel","onViewImage","onOpenSettings","onRerecord","onCopyToClipboard","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","useTranslation","current","textForTimestampInterval","subtitleStart","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","now","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","count","field","audioHelperText","imageHelperText","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","minimumChange","handleCopyImageToClipboard","pngBlob","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","minRows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","node","n1","n2","parseSrt","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","Number","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","write","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","event","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","noWrap","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","extensionUpdateAvailable","gt","i18nKey","Link","installed","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","SubtitleAlignment","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","time","CachedLocalStorage","_cache","cached","fromStorage","localStorage","getItem","setItem","removeItem","volumeKey","theaterModeKey","offsetKey","subtitleAlignmentKey","subtitlePositionOffetKey","PlaybackPreferences","storage","get","volume","set","theaterMode","rememberSubtitleOffset","val","bottom","alignment","useControlStyles","left","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onPlay","onUnloadAudio","onUnloadVideo","onOffsetChange","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","subtitleAlignment","subtitleAlignmentEnabled","onSubtitleAlignment","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","handleSubtitleAlignment","newAlignment","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onCopy","onToggleSubtitleTrack","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindResetOffet","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","currentMockSubtitle","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","currentSubtitle","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","mediaTimestamp","toggleSubtitleTrackInListMessage","_remove","videoFileName","subtitleFileNames","names","settings","msg","callbacks","splice","videoFrame","border","trackLength","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","ankiDialogOpen","onError","onLoaded","onAnkiDialogRequest","onAnkiDialogRewind","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","onTakeScreenshot","rewindSubtitle","setPlayMode","setSubtitles","subtitlesSentThroughChannel","setSubtitlesSentThroughChannel","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setChannel","channelRef","setResumeOnFinishedAnkiDialogRequest","setDisabledSubtitleTracks","audioRef","mediaAdapter","calculateLength","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","lte","uuidv4","onReady","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","mediaTimetamp","onCurrentTime","onToggleSubtitleTrackInList","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","encodeURIComponent","handlePlay","handlePause","handleSeekToTimestamp","shouldPlay","handleCopyFromSubtitlePlayer","copy","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","unbind","bindPlay","bindAdjustPlaybackRate","increase","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","bindTakeScreenshot","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","extensionOverridden","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","handler","pressed","hotkeys","getPressedKeyString","isAModifier","isBModifier","keyup","clickHandler","contains","useOutsideClickListener","xs","contentEditable","AddCustomField","onAddCustomField","setFieldName","SettingsDialog","scrollToId","keyBindProperties","copySubtitle","ankiExport","takeScreenshot","togglePlay","toggleAutoPause","toggleCondensedPlayback","toggleSubtitles","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","seekBackward","seekForward","seekToPreviousSubtitle","seekToNextSubtitle","seekToBeginningOfCurrentSubtitle","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","increaseOffset","decreaseOffset","resetOffset","increasePlaybackRate","decreasePlaybackRate","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","keyBindSet","setKeyBindSet","setRememberSubtitleOffset","miningHistoryStorageLimit","setMiningHistoryStorageLimit","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","setLanguage","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleMiningHistoryStorageLimit","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","handleLanguage","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","origin","location","hostname","DialogTitle","FormLabel","FormGroup","FormHelperText","values","components","FormControlLabel","control","Switch","labelPlacement","inputProps","select","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","miningHistoryStorageLimitKey","languageKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","delete","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","DefaultKeyBinder","disabledGetter","subtitleGetter","capture","shortcut","copyHandler","_bind","onAnkiExport","ankiExportHandler","onUpdateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","unbindPrevious","unbindNext","delegate","_adjacentSubtitle","previousShortcut","nextShortcut","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","_currentSubtitle","minDiff","MAX_SAFE_INTEGER","diff","onSeekBackwardOrForward","unbindBack","backShortcut","backHandler","adjacentSubtitleIndex","currentOffset","decreaseShortcut","increaseShortcut","decreaseHandler","increaseHandler","unbindDecrease","unbindIncrease","onResetOffset","onAdjustPlaybackRate","onToggleSubtitles","shortcuts","unbindHandlers","unbindHandler","onAutoPause","wrappedHandler","stopImmediatePropagation","keydown","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","takeScreenshotHandlers","onExtensionMessage","handlers","h","KeyboardEvent","useCapture","takeScreenshotHandler","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","seekRequest","poppingInRef","videoRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","setSubtitleAlignment","subtitlePositionOffset","setSubtitlePositionOffset","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","lastMinedRecord","setLastMinedRecord","changeLanguage","videoRefCallback","videoElement","onloadeddata","ontimeupdate","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","toggleSubtitleTrackInList","extractSubtitles","mineSubtitle","mineCurrentSubtitle","extracted","currentTimestamp","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","onWheel","deltaY","shouldIncreaseOffset","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","realExtension","CopyHistoryDatabase","copyHistoryItems","stores","Dexie","CopyHistoryRepository","limit","_db","_limit","reverse","toArray","audioTrack","filePlaybackRate","record","audioFileName","put","_prune","lastIndex","where","belowOrEqual","primaryKeys","bulkDelete","LocalizedError","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","keyBindNameMap","initialExtension","listenForVersion","versionListener","translatedCommands","extensionCommandName","unbindInitialListener","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","calculateInterval","fromFile","fromMissingFile","imageFromItem","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","setExtension","useChromeExtension","setVideoFullscreen","videoPlayerSeekRequest","setVideoPlayerSeekRequest","drawerRatio","minDrawerSize","copyHistoryRepository","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","locKey","locParams","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","handleTakeScreenshot","lastCopyHistoryItem","newCopyHistoryItem","save","subtitleFile","newCopiedSubtitle","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","publishSharedGlobalSettings","handleDeleteCopyHistoryItem","newCopiedSubtitles","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","handleAnkiDialogRewindFromVideoPlayer","subscribeTabs","t1","t2","selectedTabMissing","tabName","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","handleCopyToClipboard","ClipboardItem","i18nInitialized","setI18nInitialized","on","off","useI18nInitialized","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.c4f8dd4a.chunk.js","sourcesContent":["var map = {\n\t\"./de.json\": [\n\t\t414,\n\t\t3\n\t],\n\t\"./en.json\": [\n\t\t415,\n\t\t4\n\t],\n\t\"./ja.json\": [\n\t\t416,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 293;\nmodule.exports = webpackAsyncContext;","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport resourcesToBackend from 'i18next-resources-to-backend';\nimport { useEffect, useState } from 'react';\n\nconst i18nInit = i18n\n    .use(LanguageDetector)\n    .use(resourcesToBackend((language: string) => import(`@project/common/locales/${language}.json`)))\n    .use(initReactI18next)\n    .init({\n        partialBundledLanguages: true,\n        resources: {},\n        fallbackLng: 'en',\n        debug: process.env.NODE_ENV === 'development',\n        ns: 'translation',\n        defaultNS: 'translation',\n        interpolation: {\n            escapeValue: false,\n        },\n        detection: {\n            order: ['localStorage'],\n            lookupLocalStorage: 'i18nextLng',\n            caches: ['localStorage'],\n        },\n    });\n\nconst useI18nInitialized = () => {\n    const [i18nInitialized, setI18nInitialized] = useState<boolean>(false);\n    const [language, setLanguage] = useState<string>(i18n.language);\n\n    useEffect(() => {\n        i18nInit.then(() => setI18nInitialized(true));\n    }, []);\n\n    useEffect(() => {\n        i18n.on('languageChanged', setLanguage);\n        return () => i18n.off('languageChanged', setLanguage);\n    }, []);\n\n    return { i18nInitialized, language };\n};\n\nexport { useI18nInitialized, i18n };\n","import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder-worker.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './mp3-encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder-worker.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n    isPlayable: () => boolean;\n}\n\nfunction recorderConfiguration() {\n    const AUDIO_TYPES: { [key: string]: string } = {\n        'audio/ogg;codecs=opus': 'ogg',\n        'audio/webm;codecs=opus': 'webm',\n    };\n    return Object.keys(AUDIO_TYPES)\n        .filter(MediaRecorder.isTypeSupported)\n        .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n\nclass MissingFileAudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly _extension: string;\n\n    constructor(fileName: string, start: number, end: number) {\n        this._name = `${fileName}_${start}_${end}`;\n        this._start = start;\n        this._end = end;\n        [, this._extension] = recorderConfiguration();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    async play() {\n        throw new Error('Not supported');\n    }\n\n    async blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not  supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return false;\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    static fromMissingFile(fileName: string, start: number, end: number) {\n        return new AudioClip(new MissingFileAudioData(fileName, start, end));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n","import { RectModel } from \"./model\";\n\nexport const resizeCanvas = (\n    canvas: HTMLCanvasElement,\n    ctx: CanvasRenderingContext2D,\n    maxWidth: number,\n    maxHeight: number\n): Promise<HTMLCanvasElement> => {\n    return new Promise((resolve, reject) => {\n        const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n        const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n        const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n        if (ratio < 1) {\n            const newWidth = canvas.width * ratio;\n            const newHeight = canvas.height * ratio;\n            createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight, resizeQuality: 'high' })\n                .then((sprite) => {\n                    canvas.width = newWidth;\n                    canvas.height = newHeight;\n                    ctx.drawImage(sprite, 0, 0);\n                    resolve(canvas);\n                })\n                .catch((e) => reject(e));\n        } else {\n            resolve(canvas);\n        }\n    });\n};\n\nexport const cropAndResize = async (\n    maxWidth: number,\n    maxHeight: number,\n    rect: RectModel,\n    imageDataUrl: string\n): Promise<string> => {\n    return new Promise((resolve, reject) => {\n        const image = new Image();\n\n        image.onload = async () => {\n            const canvas = document.createElement('canvas');\n            const r = window.devicePixelRatio;\n            const width = rect.width * r;\n            const height = rect.height * r;\n            canvas.width = width;\n            canvas.height = height;\n            const ctx = canvas.getContext('2d')!;\n            ctx.drawImage(image, rect.left * r, rect.top * r, width, height, 0, 0, width, height);\n\n            if (maxWidth > 0 || maxHeight > 0) {\n                try {\n                    await resizeCanvas(canvas, ctx, maxWidth, maxHeight);\n                    resolve(canvas.toDataURL('image/jpeg'));\n                } catch (e) {\n                    console.error('Failed to crop and resize image: ' + e);\n                    reject(e);\n                }\n            } else {\n                resolve(canvas.toDataURL('image/jpeg'));\n            }\n        };\n\n        image.src = imageDataUrl;\n    });\n};","import { resizeCanvas } from './image-transformer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    await resizeCanvas(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\nclass MissingFileImageData implements ImageData {\n    private readonly _name: string;\n\n    constructor(fileName: string, timestamp: number) {\n        this._name = `${fileName}_${Math.floor(timestamp)}`;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return false;\n    }\n\n    base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    dataUrl(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n    available: boolean;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    static fromMissingFile(fileName: string, timestamp: number) {\n        return new Image(new MissingFileImageData(fileName, timestamp));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    get available() {\n        return this.data.available;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './audio-clip';\nimport Image from './image';\nimport { HttpFetcher, Fetcher } from './fetcher';\nimport { AnkiSettings } from './settings';\nimport sanitize from 'sanitize-filename';\nimport { AudioModel, ImageModel, SubtitleModel } from './model';\nimport { extractText } from './util';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport async function updateLastCard(\n    ankiSettings: AnkiSettings,\n    subtitle: SubtitleModel,\n    surroundingSubtitles: SubtitleModel[],\n    audioModel: AudioModel | undefined,\n    imageModel: ImageModel | undefined,\n    sourceString: string,\n    url: string | undefined\n) {\n    const anki = new Anki(ankiSettings);\n    let audioClip =\n        audioModel === undefined\n            ? undefined\n            : AudioClip.fromBase64(\n                  sourceString,\n                  subtitle.start,\n                  subtitle.end,\n                  audioModel.playbackRate ?? 1,\n                  audioModel.base64,\n                  audioModel.extension\n              );\n\n    return await anki.export(\n        extractText(subtitle, surroundingSubtitles),\n        undefined,\n        audioClip,\n        imageModel === undefined\n            ? undefined\n            : Image.fromBase64(sourceString, subtitle.start, imageModel.base64, imageModel.extension),\n        undefined,\n        sourceString,\n        url,\n        {},\n        ankiSettings.tags,\n        'updateLast'\n    );\n}\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip && audioClip.isPlayable()) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image && image.available) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { AnkiSettings } from './settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n    openedFromMiningCommand?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","import { SubtitleModel } from './model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","export { default as AudioClip } from './src/audio-clip';\nexport { default as Mp3Encoder } from './src/mp3-encoder';\nexport { default as Image } from './src/image';\nexport * from './src/anki';\nexport * from './src/image-transformer';\nexport * from './src/command';\nexport * from './src/util';\nexport * from './src/settings';\nexport * from './src/model';\nexport * from './src/message';\nexport * from './src/extension-settings';\nexport { default as AutoPauseContext } from './src/auto-pause-context';\nexport const supportedLanguages = ['en', 'ja', 'de'];\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    onCopyToClipboard: (blob: Blob) => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    onCopyToClipboard,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n    const { t } = useTranslation();\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!audioClip?.isPlayable()) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? t('ankiDialog.foundDuplicateNotes', {\n                      count: duplicateNotes.length,\n                      word: word,\n                      field: settingsProvider.wordField,\n                  })\n                : t('ankiDialog.foundNoDuplicateNote', { word: word, field: settingsProvider.wordField });\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!image?.available) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const currentLength = timestampBoundaryInterval[1] - timestampBoundaryInterval[0];\n        const minimumChange = currentLength / 4;\n        const newMin = Math.max(\n            0,\n            Math.min(\n                timestampBoundaryInterval[0] - minimumChange,\n                2 * timestampBoundaryInterval[0] - timestampInterval[0]\n            )\n        );\n        const newMax = Math.max(\n            timestampBoundaryInterval[1] + minimumChange,\n            2 * timestampBoundaryInterval[1] - timestampInterval[1]\n        );\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            onCopyToClipboard(await image.pngBlob());\n        },\n        [image, onCopyToClipboard]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title={t('ankiDialog.rerecord')!}>\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    let audioHelperText: string | undefined;\n\n    if (audioClip) {\n        if (!audioClip.isPlayable()) {\n            audioHelperText = t('ankiDialog.audioFileLinkLost') ?? undefined;\n        } else if (onRerecord === undefined && !audioClip.isSliceable()) {\n            audioHelperText = t('ankiDialog.cannotUpdateAudio') ?? undefined;\n        }\n    }\n\n    let imageHelperText: string | undefined;\n\n    if (image) {\n        if (!image.available) {\n            imageHelperText = t('ankiDialog.imageFileLinkLost') ?? undefined;\n        }\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    {t('ankiDialog.title')}\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n                {onCancel && (\n                    <IconButton edge=\"end\" onClick={() => onCancel()}>\n                        <CloseIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label={t('ankiDialog.sentence')}\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.applySelection')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        minRows={8}\n                        label={t('ankiDialog.definition')!}\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.word')}\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title={t('ankiDialog.searchInAnki')!}>\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label={t('ankiDialog.audio')}\n                                helperText={audioHelperText}\n                                disabled={!audioClip.isPlayable()}\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label={t('ankiDialog.image')}\n                                helperText={imageHelperText}\n                                disabled={!image.available}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title={t('ankiDialog.copyToClipboard')!}>\n                                                <span>\n                                                    <IconButton\n                                                        disabled={!image.available}\n                                                        onClick={handleCopyImageToClipboard}\n                                                        edge=\"end\"\n                                                    >\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label={t('ankiDialog.source')}\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label={t('ankiDialog.url')}\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText={t('ankiDialog.tagList')}\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.resetSlider')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomIn')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title={t('ankiDialog.zoomOut')!}>\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    {t('ankiDialog.openInAnki')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    {t('ankiDialog.updateLastCard')}\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    {t('ankiDialog.export')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .filter((node) => node.textImage !== undefined || node.text !== '')\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement).trim();\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n    const { t } = useTranslation();\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            {t('action.openFiles')}\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            {t('action.downloadSubtitlesAsSrt')}\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title={t('action.openFiles')!}\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" noWrap className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title={t('bar.donate')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#donations\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.submitIssue')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.help')!}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('bar.settings')!}>\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title={t('bar.miningHistory')!} show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioFileName?: string;\n    audioTrack?: string;\n    videoFile?: File;\n    videoFileName?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const { t } = useTranslation();\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.copy')} />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.jumpTo')} />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadAudio')}\n                        />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText\n                            primaryTypographyProps={{ variant: 'body2' }}\n                            primary={t('action.downloadImage')}\n                        />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary={t('action.delete')} />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n    const { t } = useTranslation();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title={t('copyHistory.downloadMinedSubsAsSrt')!}>\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title={t('copyHistory.exportToAnki')!}>\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <NoteAddIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? t('copyHistory.blank') : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">{t('copyHistory.miningHistoryEmpty')}</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport { Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const extensionUpdateAvailable = extension.version && gt(latestExtensionVersion, extension.version);\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        <Trans i18nKey={'landing.cta'}>\n                            Drag and drop subtitle and media files, or\n                            <Link\n                                target=\"#\"\n                                className={classes.browseLink}\n                                onClick={onFileSelector}\n                                color=\"secondary\"\n                                component=\"label\"\n                            >\n                                browse\n                            </Link>\n                            .\n                        </Trans>\n                        <br />\n                        {!extension.installed && (\n                            <Trans i18nKey=\"landing.extensionNotInstalled\">\n                                Install the\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>\n                                to sync subtitles with streaming video.\n                            </Trans>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <Trans i18nKey=\"landing.extensionUpdateAvailable\">\n                                An extension\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </Trans>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from '../../src/model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import CachedLocalStorage from './cached-local-storage';\nimport SettingsProvider from './settings-provider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst subtitleAlignmentKey = 'subtitleAlignment';\nconst subtitlePositionOffetKey = 'subtitlePositionOffset';\nconst defaultVolume = 100;\n\nexport enum SubtitleAlignment {\n    bottom = 0,\n    top = 1,\n}\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n    private readonly storage = new CachedLocalStorage();\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = this.storage.get(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        this.storage.set(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return this.storage.get(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        this.storage.set(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = this.storage.get(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        this.storage.set(offsetKey, String(offset));\n    }\n\n    get subtitleAlignment() {\n        const val = this.storage.get(subtitleAlignmentKey);\n\n        if (val === undefined) {\n            return SubtitleAlignment.bottom;\n        }\n\n        return Number(val) as SubtitleAlignment;\n    }\n\n    set subtitleAlignment(alignment: SubtitleAlignment) {\n        this.storage.set(subtitleAlignmentKey, String(alignment));\n    }\n\n    get subtitlePositionOffset() {\n        const val = this.storage.get(subtitlePositionOffetKey);\n\n        if (val === null) {\n            return 100;\n        }\n\n        return Number(val);\n    }\n\n    set subtitlePositionOffset(offset: number) {\n        this.storage.set(subtitlePositionOffetKey, String(offset));\n    }\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./video-protocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\nimport { VideoProtocol, VideoProtocolMessage } from './video-protocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/clock';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    const { t } = useTranslation();\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        {t('controls.normalMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        {t('controls.condensedMode')}\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        {t('controls.autoPauseMode')}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n    subtitleAlignmentEnabled?: boolean;\n    subtitleAlignment?: SubtitleAlignment;\n    onSubtitleAlignment?: (alignment: SubtitleAlignment) => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n    subtitleAlignment,\n    subtitleAlignmentEnabled,\n    onSubtitleAlignment,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const { t } = useTranslation();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const handleSubtitleAlignment = useCallback(() => {\n        if (!subtitleAlignmentEnabled || subtitleAlignment === undefined || onSubtitleAlignment === undefined) {\n            return;\n        }\n\n        const newAlignment =\n            subtitleAlignment === SubtitleAlignment.top ? SubtitleAlignment.bottom : SubtitleAlignment.top;\n        onSubtitleAlignment(newAlignment);\n    }, [subtitleAlignment, subtitleAlignmentEnabled, onSubtitleAlignment]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.subtitleOffset')!}>\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title={t('controls.playbackRate')!}>\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitleAlignmentEnabled && subtitleAlignment !== undefined && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleSubtitleAlignment}>\n                                        {subtitleAlignment === SubtitleAlignment.top ? (\n                                            <VerticalAlignTopIcon />\n                                        ) : (\n                                            <VerticalAlignBottomIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { useTranslation } from 'react-i18next';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    AutoPauseContext,\n    mockSurroundingSubtitles,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { KeyBinder } from '@project/common/key-binder';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], postMineAction: PostMineAction) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const { t } = useTranslation();\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(0);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const currentMockSubtitle = useCallback(() => {\n        const timestamp = clock.time(length);\n        const end = Math.min(timestamp + 5000, length);\n        return {\n            text: '',\n            start: timestamp,\n            originalStart: timestamp,\n            end: end,\n            originalEnd: end,\n            track: 0,\n        };\n    }, [clock, length]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!subtitles || subtitles.length === 0) {\n                return mockSurroundingSubtitles(currentMockSubtitle(), length, 5000);\n            }\n\n            if (!selectedSubtitleIndexesRef.current || Object.keys(selectedSubtitleIndexesRef.current).length === 0) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [\n            length,\n            subtitles,\n            currentMockSubtitle,\n            settingsProvider.surroundingSubtitlesCountRadius,\n            settingsProvider.surroundingSubtitlesTimeRadius,\n        ]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            return {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n        }\n\n        if (!selectedSubtitleIndexesRef.current) {\n            return undefined;\n        }\n\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none);\n            },\n            () => disableKeyEvents,\n            () => calculateCurrentSubtitle()\n        );\n    }, [keyBinder, disableKeyEvents, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.showAnkiDialog);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const currentSubtitle = calculateCurrentSubtitle();\n\n                if (currentSubtitle) {\n                    onCopy(currentSubtitle, calculateSurroundingSubtitles(), PostMineAction.updateLastCard);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateCurrentSubtitle, calculateSurroundingSubtitles]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{t('landing.noSubtitles')}</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    TakeScreenshotToVideoPlayerMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './video-protocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        id: string | undefined,\n        mediaTimestamp: number | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.id,\n                            copyMessage.mediaTimestamp\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n        return () => this._remove(callback, this.exitCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.popOutToggleCallbacks);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            id: string | undefined,\n            mediaTimestamp: number | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiDialogRequestCallbacks);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n        return () => this._remove(callback, this.toggleSubtitleTrackInListCallbacks);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    copy(postMineAction: PostMineAction) {\n        const message: CopyToVideoMessage = { command: 'copy', postMineAction };\n        this.protocol.postMessage(message);\n    }\n\n    takeScreenshot() {\n        const message: TakeScreenshotToVideoPlayerMessage = { command: 'takeScreenshot' };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    PlayMode,\n    PostMineAction,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { KeyBinder } from '@project/common/key-binder';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/broadcast-channel-video-protocol';\nimport ChromeTabVideoProtocol from '../services/chrome-tab-video-protocol';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/media-adapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/video-channel';\nimport ChromeExtension from '../services/chrome-extension';\nimport SubtitleReader from '../services/subtitle-reader';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audio: HTMLAudioElement | null,\n    video: MediaElement | undefined,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n): number {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audio && audio.duration ? 1000 * audio.duration : 0;\n    const videoLength = video && video.duration ? 1000 * video.duration : 0;\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogOpen: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: any) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAnkiDialogRewind: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    onTakeScreenshot: (mediaTimestamp: number) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAnkiDialogRewind,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    onTakeScreenshot,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const [subtitlesSentThroughChannel, setSubtitlesSentThroughChannel] = useState<boolean>();\n    const subtitlesRef = useRef<DisplaySubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [channel, setChannel] = useState<VideoChannel>();\n    const channelRef = useRef<VideoChannel>();\n    channelRef.current = channel;\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter({ current: channel });\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [channel, audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const calculateLength = () => trackLength(audioRef.current, channelRef.current, subtitlesRef.current);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (channel !== undefined) {\n                        channel.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            channel.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab, channel]\n    );\n\n    useEffect(() => {\n        if (!videoFileUrl && !tab) {\n            return;\n        }\n\n        let channel: VideoChannel;\n\n        if (videoFileUrl) {\n            const channelId = uuidv4();\n            channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n            setChannelId(channelId);\n        } else {\n            channel = new VideoChannel(new ChromeTabVideoProtocol(tab!.id, tab!.src, extension));\n            channel.init();\n        }\n\n        videoChannelRef.current = channel;\n        setChannel(channel);\n\n        return () => {\n            clock.setTime(0);\n            clock.stop();\n            setPlaying(false);\n            channel.close();\n        };\n    }, [clock, videoFileUrl, tab, extension, videoChannelRef]);\n\n    useEffect(() => {\n        async function init() {\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setSubtitlesSentThroughChannel(false);\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setPlayMode((playMode) => (!subtitles || subtitles.length === 0 ? PlayMode.normal : playMode));\n                } catch (e) {\n                    onError(e);\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n                setPlayMode(PlayMode.normal);\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n            }\n        }\n\n        init().then(() => onLoaded());\n    }, [\n        subtitleReader,\n        playbackPreferences,\n        mediaAdapter,\n        onLoaded,\n        onError,\n        subtitleFiles,\n        audioFileUrl,\n        flattenSubtitleFiles,\n    ]);\n\n    useEffect(() => {\n        setPlaying(false);\n        clock.setTime(0);\n        clock.stop();\n\n        if (audioRef.current) {\n            audioRef.current.pause();\n            audioRef.current.currentTime = 0;\n        }\n    }, [clock, audioFileUrl]);\n\n    useEffect(\n        () => channel?.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl)),\n        [channel, onUnloadVideo, videoFileUrl]\n    );\n    useEffect(() => channel?.onPopOutToggle(() => onVideoPopOut()), [channel, onVideoPopOut]);\n    useEffect(() => channel?.onHideSubtitlePlayerToggle(onHideSubtitlePlayer), [channel, onHideSubtitlePlayer]);\n    useEffect(() => channel?.onAppBarToggle(onAppBarToggle), [channel, onAppBarToggle]);\n    useEffect(() => channel?.onFullscreenToggle(onFullscreenToggle), [channel, onFullscreenToggle]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                return channel?.ready(trackLength(audioRef.current, channel, subtitles));\n            }),\n        [channel, subtitles]\n    );\n    useEffect(() => {\n        if (channel === undefined || subtitles === undefined || subtitlesSentThroughChannel) {\n            return;\n        }\n\n        return channel.onReady(() => {\n            setSubtitlesSentThroughChannel(true);\n            channel.subtitles(\n                subtitles,\n                flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n            );\n        });\n    }, [subtitles, channel, flattenSubtitleFiles, subtitleFiles, subtitlesSentThroughChannel]);\n    useEffect(\n        () => channel?.onReady(() => channel?.subtitleSettings(settingsProvider.subtitleSettings)),\n        [channel, settingsProvider]\n    );\n    useEffect(() => channel?.ankiSettings(settingsProvider.ankiSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.miscSettings(settingsProvider.miscSettings), [channel, settingsProvider]);\n    useEffect(() => channel?.playMode(playMode), [channel, playMode]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(\n        () =>\n            channel?.onReady(() => {\n                if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                    setAudioTracks(channel?.audioTracks);\n                    setSelectedAudioTrack(channel?.selectedAudioTrack);\n                } else {\n                    setAudioTracks(undefined);\n                    setSelectedAudioTrack(undefined);\n                }\n            }),\n        [channel]\n    );\n    useEffect(\n        () =>\n            channel?.onReady((paused) => {\n                if (channel) {\n                    clock.setTime(channel.currentTime * 1000);\n                }\n\n                if (paused) {\n                    clock.stop();\n                } else {\n                    clock.start();\n                }\n\n                setPlaying(!paused);\n\n                if (channel?.playbackRate) {\n                    clock.rate = channel.playbackRate;\n                    setPlaybackRate(channel.playbackRate);\n                }\n            }),\n        [channel, clock]\n    );\n    useEffect(\n        () => channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(\n        () => channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia)),\n        [channel, mediaAdapter, clock]\n    );\n    useEffect(() => {\n        return channel?.onOffset((offset) => applyOffset(Math.max(-calculateLength() ?? 0, offset), false));\n    }, [channel, applyOffset]);\n    useEffect(() => channel?.onPlaybackRate(updatePlaybackRate), [channel, updatePlaybackRate]);\n    useEffect(\n        () =>\n            channel?.onCopy((subtitle, surroundingSubtitles, audio, image, url, postMineAction, id, mediaTimetamp) =>\n                onCopy(\n                    subtitle,\n                    surroundingSubtitles,\n                    audioFile,\n                    videoFile,\n                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                    mediaTimetamp,\n                    channel?.selectedAudioTrack,\n                    channel?.playbackRate,\n                    audio,\n                    image,\n                    url,\n                    postMineAction,\n                    id\n                )\n            ),\n        [channel, onCopy, audioFile, videoFile, subtitleFiles]\n    );\n    useEffect(\n        () =>\n            channel?.onPlayMode((playMode) => {\n                setPlayMode(playMode);\n                channel?.playMode(playMode);\n            }),\n        [channel, playMode]\n    );\n    useEffect(\n        () =>\n            channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await seek(currentTime * 1000, clock, forwardToMedia);\n\n                if (playing) {\n                    clock.start();\n                }\n            }),\n        [channel, clock, playing, seek]\n    );\n    useEffect(\n        () =>\n            channel?.onAudioTrackSelected(async (id) => {\n                if (playing) {\n                    clock.stop();\n                }\n\n                await mediaAdapter.onReady();\n                if (playing) {\n                    clock.start();\n                }\n\n                setSelectedAudioTrack(id);\n            }),\n        [channel, clock, mediaAdapter, playing]\n    );\n    useEffect(() => channel?.onAnkiDialogRequest(() => onAnkiDialogRequest()), [channel, onAnkiDialogRequest]);\n    useEffect(\n        () =>\n            channel?.onToggleSubtitleTrackInList((track) =>\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                })\n            ),\n        [channel]\n    );\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playing) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter, playing]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const timestamp = clock.time(calculateLength());\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playing) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playing) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek, playing]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (playing) {\n                clock.stop();\n            }\n\n            await seek(progress * calculateLength(), clock, true);\n\n            if (playing) {\n                clock.start();\n            }\n        },\n        [clock, seek, playing]\n    );\n\n    const handleSeekToTimestamp = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playing) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter, playing]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], postMineAction: PostMineAction) => {\n            if (videoFileUrl) {\n                // Let VideoPlayer do the copying to ensure copied subtitle is consistent with the VideoPlayer clock\n                channel?.copy(postMineAction);\n                return;\n            }\n\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(calculateLength()),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                undefined\n            );\n        },\n        [channel, onCopy, clock, audioFile, videoFile, videoFileUrl, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            channel?.audioTrackSelected(id);\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playing) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [channel, clock, mediaAdapter, seek, playing]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            const length = calculateLength();\n            applyOffset(Math.max(-length ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const progress = clock.progress(calculateLength());\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n            channel?.playMode(newPlayMode);\n        },\n        [channel, playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if (!videoFileUrl) {\n            return;\n        }\n\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else {\n                    onTakeScreenshot(clock.time(calculateLength()));\n                }\n            },\n            () => false\n        );\n    }, [videoFileUrl, clock, onTakeScreenshot, onAnkiDialogRewind, keyBinder, disableKeyEvents, ankiDialogOpen]);\n\n    useEffect(() => channel?.appBarToggle(appBarHidden), [channel, appBarHidden]);\n    useEffect(() => channel?.hideSubtitlePlayerToggle(hideSubtitlePlayer), [channel, hideSubtitlePlayer]);\n    useEffect(() => channel?.fullscreenToggle(videoFullscreen), [channel, videoFullscreen]);\n\n    useEffect(() => {\n        if (rewindSubtitle?.start === undefined) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n        seek(rewindSubtitle.start, clock, true);\n    }, [clock, rewindSubtitle?.start, mediaAdapter, seek]);\n\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n\n                <Grid\n                    item\n                    style={{\n                        flexGrow: videoInWindow ? 0 : 1,\n                        width:\n                            videoInWindow && (hideSubtitlePlayer || !subtitles || subtitles?.length === 0) ? 0 : 'auto',\n                    }}\n                >\n                    {loaded && !(videoFileUrl && !videoPopOut) && (\n                        <Controls\n                            mousePositionRef={mousePositionRef}\n                            playing={playing}\n                            clock={clock}\n                            length={calculateLength()}\n                            displayLength={trackLength(audioRef.current, channel, subtitles, false)}\n                            audioTracks={audioTracks}\n                            selectedAudioTrack={selectedAudioTrack}\n                            tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                            selectedTab={tab}\n                            audioFile={audioFile?.name}\n                            videoFile={videoFile?.name}\n                            offsetEnabled={true}\n                            offset={offset}\n                            playbackRate={playbackRate}\n                            playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                            onPlaybackRateChange={handlePlaybackRateChange}\n                            volumeEnabled={Boolean(audioFileUrl)}\n                            playModeEnabled={playModeEnabled}\n                            playMode={playMode}\n                            onPlay={handlePlay}\n                            onPause={handlePause}\n                            onSeek={handleSeek}\n                            onAudioTrackSelected={handleAudioTrackSelected}\n                            onTabSelected={onTabSelected}\n                            onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                            onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                            onOffsetChange={handleOffsetChange}\n                            onVolumeChange={handleVolumeChange}\n                            onPlayMode={handlePlayMode}\n                            disableKeyEvents={disableKeyEvents}\n                            playbackPreferences={playbackPreferences}\n                            showOnMouseMovement={true}\n                        />\n                    )}\n                    <SubtitlePlayer\n                        playing={playing}\n                        subtitles={subtitles}\n                        subtitleCollection={subtitleCollection}\n                        clock={clock}\n                        length={calculateLength()}\n                        jumpToSubtitle={jumpToSubtitle}\n                        drawerOpen={drawerOpen}\n                        appBarHidden={appBarHidden}\n                        compressed={Boolean(videoFileUrl && !videoPopOut)}\n                        copyButtonEnabled={tab === undefined}\n                        loading={loadingSubtitles}\n                        displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                        disableKeyEvents={disableKeyEvents}\n                        lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                        hidden={videoInWindow && hideSubtitlePlayer}\n                        disabledSubtitleTracks={disabledSubtitleTracks}\n                        onSeek={handleSeekToTimestamp}\n                        onCopy={handleCopyFromSubtitlePlayer}\n                        onOffsetChange={handleOffsetChange}\n                        onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                        onSubtitlesSelected={handleSubtitlesSelected}\n                        autoPauseContext={autoPauseContext}\n                        settingsProvider={settingsProvider}\n                        keyBinder={keyBinder}\n                    />\n                </Grid>\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport AddIcon from '@material-ui/icons/Add';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AsbplayerSettings,\n    AutoPausePreference,\n    KeyBindSet,\n    KeyBindName,\n    supportedLanguages,\n} from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { useOutsideClickListener } from '../hooks/use-outside-click-listener';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        marginLeft: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const { t } = useTranslation();\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useOutsideClickListener(\n        ref,\n        useCallback(() => {\n            if (editing) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        }, [editing, onKeysChange])\n    );\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = t('settings.recordingBind');\n    } else if (extensionOverridden) {\n        placeholder = t('settings.extensionOverriddenBind');\n    } else {\n        placeholder = t('settings.unboundBind');\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? t('settings.extensionShortcut') : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface AddCustomFieldProps {\n    onAddCustomField: (fieldName: string) => void;\n}\n\nfunction AddCustomField({ onAddCustomField }: AddCustomFieldProps) {\n    const { t } = useTranslation();\n    const [fieldName, setFieldName] = useState<string>('');\n\n    return (\n        <TextField\n            label={t('settings.addCustomField')}\n            fullWidth\n            value={fieldName}\n            color=\"secondary\"\n            onChange={(e) => setFieldName(e.target.value)}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <IconButton\n                            disabled={fieldName.trim() === ''}\n                            onClick={() => {\n                                onAddCustomField(fieldName.trim());\n                                setFieldName('');\n                            }}\n                        >\n                            <AddIcon />\n                        </IconButton>\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const { t } = useTranslation();\n    const keyBindProperties = useMemo<{ [key in KeyBindName]: KeyBindProperties }>(\n        () => ({\n            copySubtitle: { label: t('binds.copySubtitle')!, extensionOverridden: true },\n            ankiExport: { label: t('binds.ankiExport')!, extensionOverridden: true },\n            updateLastCard: {\n                label: t('binds.updateLastCard')!,\n                extensionOverridden: true,\n            },\n            takeScreenshot: {\n                label: t('binds.takeScreenshot')!,\n                extensionOverridden: true,\n            },\n            togglePlay: { label: t('binds.togglePlay')!, extensionOverridden: false },\n            toggleAutoPause: { label: t('binds.toggleAutoPause')!, extensionOverridden: false },\n            toggleCondensedPlayback: { label: t('binds.toggleCondensedPlayback')!, extensionOverridden: false },\n            toggleSubtitles: { label: t('binds.toggleSubtitles')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack1: { label: t('binds.toggleVideoSubtitleTrack1')!, extensionOverridden: false },\n            toggleVideoSubtitleTrack2: { label: t('binds.toggleVideoSubtitleTrack2')!, extensionOverridden: false },\n            toggleAsbplayerSubtitleTrack1: {\n                label: t('binds.toggleAsbplayerSubtitleTrack1')!,\n                extensionOverridden: false,\n            },\n            toggleAsbplayerSubtitleTrack2: {\n                label: t('binds.toggleAsbplayerSubtitleTrack2')!,\n                extensionOverridden: false,\n            },\n            seekBackward: { label: t('binds.seekBackward')!, extensionOverridden: false },\n            seekForward: { label: t('binds.seekForward')!, extensionOverridden: false },\n            seekToPreviousSubtitle: { label: t('binds.seekToPreviousSubtitle')!, extensionOverridden: false },\n            seekToNextSubtitle: { label: t('binds.seekToNextSubtitle')!, extensionOverridden: false },\n            seekToBeginningOfCurrentSubtitle: {\n                label: t('binds.seekToBeginningOfCurrentSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToPreviousSubtitle: {\n                label: t('binds.adjustOffsetToPreviousSubtitle')!,\n                extensionOverridden: false,\n            },\n            adjustOffsetToNextSubtitle: {\n                label: t('binds.adjustOffsetToNextSubtitle')!,\n                extensionOverridden: false,\n            },\n            increaseOffset: { label: t('binds.increaseOffset')!, extensionOverridden: false },\n            decreaseOffset: { label: t('binds.decreaseOffset')!, extensionOverridden: false },\n            resetOffset: { label: t('binds.resetOffset')!, extensionOverridden: false },\n            increasePlaybackRate: { label: t('binds.increasePlaybackRate')!, extensionOverridden: false },\n            decreasePlaybackRate: { label: t('binds.decreasePlaybackRate')!, extensionOverridden: false },\n        }),\n        [t]\n    );\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [miningHistoryStorageLimit, setMiningHistoryStorageLimit] = useState<number>(\n        settings.miningHistoryStorageLimit\n    );\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n    const [language, setLanguage] = useState<string>(settings.language);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleMiningHistoryStorageLimit = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setMiningHistoryStorageLimit(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n    const handleLanguage = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setLanguage(e.target.value as string),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            miningHistoryStorageLimit: miningHistoryStorageLimit,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n            language: language,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        miningHistoryStorageLimit,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n        language,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n    const origin = `${window.location.protocol}//${window.location.hostname}`;\n    return (\n        <React.Fragment>\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>{t('settings.title')}</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>{t('settings.anki')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label={t('settings.ankiConnectUrl')}\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <Trans\n                                        i18nKey={'settings.corsHelperText'}\n                                        values={{ origin }}\n                                        components={[\n                                            <Link\n                                                color=\"secondary\"\n                                                target=\"_blank\"\n                                                rel=\"noreferrer\"\n                                                href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                            >\n                                                video\n                                            </Link>,\n                                        ]}\n                                    ></Trans>\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label={t('settings.deck')}\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.noteType')}\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sentenceField')}\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.definitionField')}\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.wordField')}\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.audioField')}\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.imageField')}\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.sourceField')}\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label={t('settings.urlField')}\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <AddCustomField onAddCustomField={handleAddCustomField} />\n                                <TagsTextField\n                                    label={t('settings.tags')}\n                                    helperText={t('settings.tagsHelperText')}\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>{t('settings.mining')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label={t('settings.mp3Preference')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label={t('settings.copyOnMine')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingStart')}\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.audioPaddingEnd')}\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageWidth')}\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.maxImageHeight')}\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesCountRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.surroundingSubtitlesTimeRadius')}\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>{t('settings.misc')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label={t('settings.rememberSubtitleOffset')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label={t('settings.autoCopy')}\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label={t('settings.miningHistoryStorageLimit')}\n                                    fullWidth\n                                    value={miningHistoryStorageLimit}\n                                    color=\"secondary\"\n                                    onChange={handleMiningHistoryStorageLimit}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilter')}\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label={t('settings.subtitleRegexFilterTextReplacement')}\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                                <TextField\n                                    select\n                                    label={t('settings.language')}\n                                    value={language}\n                                    color=\"secondary\"\n                                    onChange={handleLanguage}\n                                >\n                                    {supportedLanguages.map((s) => (\n                                        <MenuItem key={s} value={s}>\n                                            {s}\n                                        </MenuItem>\n                                    ))}\n                                </TextField>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>{t('settings.autoPausePreference')}</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip title={t('settings.autoPausePreferenceHelperText')!} placement=\"top\">\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleStart')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label={t('settings.autoPauseAtSubtitleEnd')}\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>{t('settings.subtitleAppearance')}</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleColor')}\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleSize')}\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleOutlineColor')}\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleOutlineThickness')}\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label={t('settings.subtitleBackgroundColor')}\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.subtitleBackgroundOpacity')}\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label={t('settings.subtitleFontFamily')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label={t('settings.imageBasedSubtitleScaleFactor')}\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>{t('settings.theme')}</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeLight')}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label={t('settings.themeDark')}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>{t('settings.keyboardShortcuts')}</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>{t('action.ok')}</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { RefObject, useEffect } from 'react';\n\nexport const useOutsideClickListener = (ref: RefObject<HTMLElement>, handler: (event: MouseEvent) => void) => {\n    useEffect(() => {\n        const clickHandler = (event: MouseEvent) => {\n            if (!ref.current?.contains(event.target as Node)) {\n                handler(event);\n            }\n        };\n        window.document.addEventListener('click', clickHandler);\n        return () => window.document.removeEventListener('click', clickHandler);\n    }, [ref, handler]);\n};\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './cached-local-storage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    resetOffset: { keys: isMacOs ? '⇧+⌃+down' : 'ctrl+shift+down' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    takeScreenshot: { keys: isMacOs ? '⇧+⌃+V' : 'ctrl+shift+V' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\nconst defaultMiningHistoryStorageLimit = 25;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\nconst miningHistoryStorageLimitKey = 'miningHistoryStorageLimit';\nconst languageKey = 'i18nextLng';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.miningHistoryStorageLimit = newSettings.miningHistoryStorageLimit;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n        this.language = newSettings.language;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n            language: this.language,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n\n    get miningHistoryStorageLimit() {\n        return this._getNumberItem(miningHistoryStorageLimitKey, defaultMiningHistoryStorageLimit);\n    }\n\n    set miningHistoryStorageLimit(miningHistoryStorageLimit: number) {\n        this._storage.set(miningHistoryStorageLimitKey, String(miningHistoryStorageLimit));\n    }\n\n    get language() {\n        return this._storage.get(languageKey) ?? 'en';\n    }\n\n    set language(language: string) {\n        this._storage.set(languageKey, language);\n    }\n}\n","import { SubtitleModel } from '../../src/model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from '../../src/settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.takeScreenshot.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onTakeScreenshot, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    takeScreenshotHandler(onTakeScreenshot: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onTakeScreenshot(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindBack: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (backShortcut) {\n            unbindBack = this._bind(backShortcut, capture, backHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindBack?.();\n            unbindNext?.();\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        const unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        const unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        return () => {\n            unbindDecrease();\n            unbindIncrease();\n        };\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean | undefined\n    ) {\n        const shortcut = this.keyBindSet.resetOffset.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onResetOffset(event);\n        };\n\n        return this._bind(shortcut, capture ?? false, handler);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n        let unbindDecrease: (() => void) | undefined;\n        let unbindIncrease: (() => void) | undefined;\n\n        if (decreaseShortcut) {\n            unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        }\n\n        return () => {\n            unbindDecrease?.();\n            unbindIncrease?.();\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            unbindHandlers.push(this._bind(shortcuts[i], capture, handler));\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            const unbindHandler = this._bind(shortcuts[i], capture, handler);\n            unbindHandlers.push(unbindHandler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindCondensedPlayback(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    private _bind(shortcut: string, capture: boolean, handler: (event: KeyboardEvent) => void) {\n        const wrappedHandler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                handler(event);\n            } else if (event.type === 'keyup') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n        hotkeys(shortcut, { capture, keydown: true, keyup: true }, wrappedHandler);\n        return () => hotkeys.unbind(shortcut, wrappedHandler);\n    }\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CopyToVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n    private copyCallbacks: ((postMineAction: PostMineAction) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n        this.copyCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                case 'copy':\n                    const copyMessage = event.data as CopyToVideoMessage;\n\n                    for (const callback of that.copyCallbacks) {\n                        callback(copyMessage.postMineAction);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n        return () => this._remove(callback, this.playCallbacks);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n        return () => this._remove(callback, this.pauseCallbacks);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n        return () => this._remove(callback, this.currentTimeCallbacks);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n        return () => this._remove(callback, this.audioTrackSelectedCallbacks);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n        return () => this._remove(callback, this.closeCallbacks);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n        return () => this._remove(callback, this.readyCallbacks);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitlesCallbacks);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n        return () => this._remove(callback, this.offsetCallbacks);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n        return () => this._remove(callback, this.playbackRateCallbacks);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n        return () => this._remove(callback, this.playModeCallbacks);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.hideSubtitlePlayerToggleCallbacks);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.appBarToggleCallbacks);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n        return () => this._remove(callback, this.fullscreenToggleCallbacks);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.subtitleSettingsCallbacks);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.miscSettingsCallbacks);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n        return () => this._remove(callback, this.ankiSettingsCallbacks);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n        return () => this._remove(callback, this.alertCallbacks);\n    }\n\n    onCopy(callback: (postMineAction: PostMineAction) => void) {\n        this.copyCallbacks.push(callback);\n        return () => this._remove(callback, this.copyCallbacks);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        mediaTimestamp: number,\n        postMineAction: PostMineAction\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            postMineAction: postMineAction,\n            mediaTimestamp,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n            this.copyCallbacks = [];\n        }\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import { CopySubtitleMessage, PostMineAction, SubtitleModel } from '@project/common';\nimport { DefaultKeyBinder, KeyBinder } from '@project/common/key-binder';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly takeScreenshotHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n            } else if (message.data.command === 'take-screenshot') {\n                handlers = this.takeScreenshotHandlers;\n            }\n\n            if (handlers !== undefined) {\n                for (const h of handlers) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    bindTakeScreenshot(\n        onTakeScreenshot: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.takeScreenshotHandler(onTakeScreenshot, disabledGetter);\n            this.takeScreenshotHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.takeScreenshotHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindTakeScreenshot(onTakeScreenshot, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindResetOffet(onResetOffset, disabledGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    AnkiSettings,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleCollection } from '@project/common/subtitle-collection';\nimport { DefaultKeyBinder } from '@project/common/key-binder';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/player-channel';\nimport SettingsProvider from '../services/settings-provider';\nimport AppKeyBinder from '../services/app-key-binder';\nimport ChromeExtension from '../services/chrome-extension';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\nimport { i18n } from './i18n';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 2:\n            error = 'MEDIA_ERR_ABORTED';\n            break;\n        case 3:\n            error = 'MEDIA_ERR_DECODE';\n            break;\n        case 4:\n            error = 'MEDIA_ERR_SRC_NOT_SUPPORTED';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nexport interface SeekRequest {\n    timestamp: number;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\ninterface MinedRecord {\n    videoFileUrl: string;\n    videoFileName: string;\n    selectedAudioTrack: string | undefined;\n    playbackRate: number;\n    subtitle: SubtitleModel;\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    ankiDialogOpen,\n    seekRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n    onAnkiDialogRewind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const [subtitleAlignment, setSubtitleAlignment] = useState<SubtitleAlignment>(\n        playbackPreferences.subtitleAlignment\n    );\n    const [subtitlePositionOffset, setSubtitlePositionOffset] = useState<number>(\n        playbackPreferences.subtitlePositionOffset\n    );\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const [lastMinedRecord, setLastMinedRecord] = useState<MinedRecord>();\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n\n    useEffect(() => {\n        if (i18n.language !== miscSettings.language) {\n            i18n.changeLanguage(miscSettings.language);\n        }\n    }, [miscSettings]);\n\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            setShowSubtitles([]);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    useEffect(() => {\n        if (seekRequest !== undefined) {\n            handleSeek(seekRequest.timestamp / length);\n        }\n    }, [handleSeek, seekRequest, length]);\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                handleOffsetChange(0);\n            },\n            () => false\n        );\n    }, [keyBinder, handleOffsetChange]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(() => {\n        if (!subtitles || subtitles.length === 0) {\n            const timestamp = clock.time(length);\n            const end = Math.min(timestamp + 5000, length);\n            const currentSubtitle = {\n                text: '',\n                start: timestamp,\n                originalStart: timestamp,\n                end: end,\n                originalEnd: end,\n                track: 0,\n            };\n\n            return { currentSubtitle, surroundingSubtitles: mockSurroundingSubtitles(currentSubtitle, length, 5000) };\n        } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n            const currentSubtitle = showSubtitlesRef.current[0];\n            return { currentSubtitle, surroundingSubtitles: calculateSurroundingSubtitles(currentSubtitle.index) };\n        }\n\n        return undefined;\n    }, [subtitles, calculateSurroundingSubtitles, length, clock]);\n\n    const mineSubtitle = useCallback(\n        (\n            postMineAction: PostMineAction,\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            switch (postMineAction) {\n                case PostMineAction.showAnkiDialog:\n                    if (popOut) {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.none);\n                        onAnkiDialogRequest(\n                            videoFileUrl,\n                            videoFileName ?? '',\n                            selectedAudioTrack,\n                            playbackRate,\n                            subtitle,\n                            surroundingSubtitles,\n                            timestamp\n                        );\n\n                        if (playing) {\n                            playerChannel.pause();\n                            setResumeOnFinishedAnkiDialogRequest(true);\n                        }\n                    } else {\n                        playerChannel.copy(subtitle, surroundingSubtitles, timestamp, PostMineAction.showAnkiDialog);\n                    }\n                    break;\n                default:\n                    playerChannel.copy(subtitle, surroundingSubtitles, timestamp, postMineAction);\n            }\n\n            setLastMinedRecord({\n                videoFileUrl,\n                videoFileName: videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                subtitle,\n                surroundingSubtitles,\n                timestamp,\n            });\n        },\n        [onAnkiDialogRequest, playerChannel, playing, popOut]\n    );\n\n    const mineCurrentSubtitle = useCallback(\n        (postMineAction: PostMineAction) => {\n            const extracted = extractSubtitles();\n\n            if (extracted === undefined) {\n                return;\n            }\n\n            const { currentSubtitle, surroundingSubtitles } = extracted;\n            mineSubtitle(\n                postMineAction,\n                videoFile,\n                videoFileName ?? '',\n                selectedAudioTrack,\n                playbackRate,\n                currentSubtitle,\n                surroundingSubtitles,\n                clock.time(length)\n            );\n        },\n        [mineSubtitle, extractSubtitles, clock, length, playbackRate, selectedAudioTrack, videoFile, videoFileName]\n    );\n\n    useEffect(() => {\n        return playerChannel.onCopy(mineCurrentSubtitle);\n    }, [playerChannel, mineCurrentSubtitle]);\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.showAnkiDialog);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                mineCurrentSubtitle(PostMineAction.updateLastCard);\n            },\n            () => false\n        );\n    }, [mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindTakeScreenshot(\n            (event) => {\n                event.preventDefault();\n\n                if (popOut && ankiDialogOpen) {\n                    onAnkiDialogRewind();\n                } else if (lastMinedRecord) {\n                    const currentTimestamp = clock.time(length);\n                    mineSubtitle(\n                        PostMineAction.showAnkiDialog,\n                        lastMinedRecord.videoFileUrl,\n                        lastMinedRecord.videoFileName,\n                        lastMinedRecord.selectedAudioTrack,\n                        lastMinedRecord.playbackRate,\n                        lastMinedRecord.subtitle,\n                        lastMinedRecord.surroundingSubtitles,\n                        currentTimestamp\n                    );\n                }\n            },\n            () => false\n        );\n    }, [clock, length, keyBinder, lastMinedRecord, mineSubtitle, popOut, ankiDialogOpen, onAnkiDialogRewind]);\n\n    useEffect(() => {\n        return keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                mineCurrentSubtitle(PostMineAction.none);\n            },\n            () => false,\n            () => {\n                const extracted = extractSubtitles();\n\n                if (extracted === undefined) {\n                    return undefined;\n                }\n\n                return extracted.currentSubtitle;\n            }\n        );\n    }, [extractSubtitles, mineCurrentSubtitle, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleSubtitleAlignment = useCallback(\n        (alignment: SubtitleAlignment) => {\n            setSubtitleAlignment(alignment);\n            playbackPreferences.subtitleAlignment = alignment;\n        },\n        [playbackPreferences]\n    );\n\n    useEffect(() => {\n        const onWheel = (event: WheelEvent) => {\n            if (!subtitlesEnabled || !showSubtitlesRef.current?.length) {\n                return;\n            }\n\n            if (Math.abs(event.deltaY) < 10) {\n                return;\n            }\n\n            let shouldIncreaseOffset: boolean;\n\n            switch (subtitleAlignment) {\n                case SubtitleAlignment.bottom:\n                    shouldIncreaseOffset = event.deltaY > 0;\n                    break;\n                case SubtitleAlignment.top:\n                    shouldIncreaseOffset = event.deltaY < 0;\n                    break;\n            }\n\n            setSubtitlePositionOffset((offset) => {\n                const newOffset = shouldIncreaseOffset ? --offset : ++offset;\n                playbackPreferences.subtitlePositionOffset = newOffset;\n                return newOffset;\n            });\n        };\n\n        window.addEventListener('wheel', onWheel);\n        return () => window.removeEventListener('wheel', onWheel);\n    }, [subtitleAlignment, subtitlesEnabled, playbackPreferences]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div\n                    style={\n                        subtitleAlignment === SubtitleAlignment.bottom\n                            ? { bottom: subtitlePositionOffset }\n                            : { top: subtitlePositionOffset }\n                    }\n                    className={classes.subtitleContainer}\n                >\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n                subtitleAlignment={subtitleAlignment}\n                subtitleAlignmentEnabled={true}\n                onSubtitleAlignment={handleSubtitleAlignment}\n            />\n        </div>\n    );\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from '../services/chrome-extension';\nimport { useEffect, useState } from 'react';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n    'take-screenshot': 'takeScreenshot',\n};\n\nconst initialExtension = new ChromeExtension();\nlet realExtension: ChromeExtension | undefined;\n\nconst listenForVersion = (callback: (extension: ChromeExtension) => void) => {\n    const versionListener = (event: MessageEvent) => {\n        if (event.source !== window) {\n            return;\n        }\n\n        if (event.data.sender === 'asbplayer-extension-to-player') {\n            if (event.data.message.command === 'version') {\n                const message = event.data.message as ExtensionVersionMessage;\n                const translatedCommands: { [key: string]: string | undefined } = {};\n                const extensionCommands = message.extensionCommands ?? {};\n\n                for (const extensionCommandName of Object.keys(extensionCommands)) {\n                    translatedCommands[keyBindNameMap[extensionCommandName]] = extensionCommands[extensionCommandName];\n                }\n\n                callback(new ChromeExtension(message.version, translatedCommands));\n            }\n        }\n    };\n\n    window.addEventListener('message', versionListener);\n\n    return () => {\n        window.removeEventListener('message', versionListener);\n    };\n};\n\nconst unbindInitialListener = listenForVersion((extension) => (realExtension = extension));\n\nexport const useChromeExtension = () => {\n    const [extension, setExtension] = useState<ChromeExtension>(initialExtension);\n\n    useEffect(() => {\n        if (realExtension) {\n            setExtension(realExtension);\n        } else {\n            unbindInitialListener();\n            return listenForVersion(setExtension);\n        }\n    }, []);\n\n    return extension;\n};\n","import { AudioModel, ImageModel, SubtitleModel } from '@project/common';\nimport Dexie from 'dexie';\nimport { CopyHistoryItem } from '../components/CopyHistory';\n\nclass CopyHistoryDatabase extends Dexie {\n    copyHistoryItems!: Dexie.Table<CopyHistoryRecord, number>;\n\n    constructor() {\n        super('CopyHistoryDatabase');\n        this.version(1).stores({\n            copyHistoryItems: '++index,id,timestamp',\n        });\n    }\n}\n\ninterface CopyHistoryRecord extends SubtitleModel {\n    index?: number;\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioTrack?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    videoFileName?: string;\n    audioFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\nexport default class CopyHistoryRepository {\n    private readonly _db = new CopyHistoryDatabase();\n    private _limit: number;\n\n    constructor(limit: number) {\n        this._limit = limit;\n    }\n\n    set limit(limit: number) {\n        this._limit = limit;\n    }\n\n    async fetch(count: number): Promise<CopyHistoryItem[]> {\n        if (count <= 0) {\n            return [];\n        }\n\n        const result = await await this._db.copyHistoryItems.reverse().limit(count).toArray();\n        result.reverse();\n        return result;\n    }\n\n    async save(item: CopyHistoryItem) {\n        if (this._limit <= 0) {\n            return;\n        }\n\n        const {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFile,\n            audioFile,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        } = item;\n        const record = {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFileName: videoFile?.name,\n            audioFileName: audioFile?.name,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        };\n        const index = await this._db.copyHistoryItems.put(record);\n        await this._prune(index);\n    }\n\n    private async _prune(lastIndex: number) {\n        const size = await this._db.copyHistoryItems.count();\n\n        if (size > this._limit) {\n            const keys = await this._db.copyHistoryItems\n                .where('index')\n                .belowOrEqual(lastIndex - this._limit)\n                .primaryKeys();\n\n            if (keys.length > 0) {\n                await this._db.copyHistoryItems.bulkDelete(keys);\n            }\n        }\n    }\n\n    async delete(id: string) {\n        const keys = await this._db.copyHistoryItems.where('id').equals(id).primaryKeys();\n        await this._db.copyHistoryItems.bulkDelete(keys);\n    }\n}\n","export default class LocalizedError extends Error {\n    private readonly key: string;\n    private readonly params: { [key: string]: string };\n\n    constructor(key: string, params: { [key: string]: string } = {}) {\n        super(key);\n        this.key = key;\n        this.params = params;\n    }\n\n    get locKey() {\n        return this.key;\n    }\n\n    get locParams() {\n        return this.params;\n    }\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    Command,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    SharedGlobalSettings,\n    SharedSettingsUpdatedMessage,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer,\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishSharedGlobalSettings(settings: SharedGlobalSettings) {\n        const command: Command<SharedSettingsUpdatedMessage> = {\n            sender: 'asbplayerv2',\n            message: {\n                command: 'shared-settings-updated',\n                settings: {\n                    language: settings.language,\n                    themeType: settings.themeType,\n                },\n            },\n        };\n        window.postMessage(command, '*');\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { i18n, useI18nInitialized } from './i18n';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/use-window-size';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/subtitle-reader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/chrome-extension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/settings-provider';\nimport VideoPlayer, { SeekRequest } from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/key-binder';\nimport AppKeyBinder from '../services/app-key-binder';\nimport VideoChannel from '../services/video-channel';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport CopyHistoryRepository from '../services/copy-history-repository';\nimport './i18n';\nimport { useTranslation } from 'react-i18next';\nimport LocalizedError from './localized-error';\nimport { useChromeExtension } from '../hooks/use-chrome-extension';\n\nconst latestExtensionVersion = '0.27.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new LocalizedError('error.unknownExtension', { fileName: f.name });\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new LocalizedError('error.onlyOneVideoFile');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new LocalizedError('error.onlyOneAudioFile');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new LocalizedError('error.unsupportedExtension', { extension });\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new LocalizedError('error.bothAudioAndVideNotAllowed');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFileName!,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    const calculateInterval = () => {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return [start, end];\n    };\n\n    if (item.audioFile || item.videoFile) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    if (item.audioFileName || item.videoFileName) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromMissingFile((item.audioFileName || item.videoFileName)!, start, end);\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFileName!, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    if (item.videoFileName) {\n        return Image.fromMissingFile(item.videoFileName, item.mediaTimestamp ?? item.start);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFileName ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    ankiDialogOpen: boolean;\n    seekRequest?: SeekRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onAnkiDialogRewind: () => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({ searchParams, ...props }: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return <VideoPlayer videoFile={videoFile} channel={channel} popOut={popOut} {...props} />;\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const { t } = useTranslation();\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter, 'g');\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extension = useChromeExtension();\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [videoPlayerSeekRequest, setVideoPlayerSeekRequest] = useState<SeekRequest>();\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const copyHistoryRepository = useMemo(\n        () => new CopyHistoryRepository(settingsProvider.miningHistoryStorageLimit),\n        [settingsProvider]\n    );\n    useEffect(() => {\n        copyHistoryRepository.limit = settingsProvider.miningHistoryStorageLimit;\n    }, [copyHistoryRepository, settingsProvider.miningHistoryStorageLimit]);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback(\n        (message: any) => {\n            console.error(message);\n\n            setAlertSeverity('error');\n\n            if (message instanceof LocalizedError) {\n                setAlert(t(message.locKey, message.locParams) ?? '<failed to localize error>');\n            } else if (message instanceof Error) {\n                setAlert(message.message);\n            } else if (typeof message === 'string') {\n                setAlert(message);\n            } else {\n                setAlert(String(message));\n            }\n\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.exportedCard', { result })!);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert(t('info.updatedCard', { result })!);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                handleError(e);\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError, t]\n    );\n\n    const handleTakeScreenshot = useCallback(\n        (mediaTimestamp: number) => {\n            if (sources.videoFile === undefined || copiedSubtitles.length === 0) {\n                return;\n            }\n\n            const lastCopyHistoryItem = copiedSubtitles[copiedSubtitles.length - 1];\n            const newCopyHistoryItem = {\n                ...lastCopyHistoryItem,\n                id: uuidv4(),\n                image: undefined,\n                videoFile: sources.videoFile,\n                mediaTimestamp,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => [...copiedSubtitles, newCopyHistoryItem]);\n            copyHistoryRepository.save(newCopyHistoryItem);\n            handleAnkiDialogRequest(newCopyHistoryItem);\n        },\n        [sources.videoFile, copiedSubtitles, handleAnkiDialogRequest, copyHistoryRepository]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName ?? subtitleFile?.name ?? videoFile?.name ?? audioFile?.name ?? '',\n                subtitleFileName: subtitleFile?.name,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === ''\n                        ? t('info.savedTimestamp', { timestamp: humanReadableTime(subtitle.start) })!\n                        : t('info.copiedSubtitle', { text: subtitle.text })!\n                );\n                setAlertOpen(true);\n            }\n\n            copyHistoryRepository.save(newCopiedSubtitle);\n        },\n        [fileName, settingsProvider, copyHistoryRepository, handleAnkiDialogProceed, handleAnkiDialogRequest, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return;\n        }\n\n        (async () => {\n            setCopiedSubtitles(await copyHistoryRepository.fetch(settingsProvider.miningHistoryStorageLimit));\n        })();\n    }, [inVideoPlayer, copyHistoryRepository, settingsProvider]);\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n        setHideSubtitlePlayer(false);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n\n            if (i18n.language !== settingsProvider.language) {\n                i18n.changeLanguage(settingsProvider.language);\n            }\n\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n            extension.publishSharedGlobalSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen, extension]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n            copyHistoryRepository.delete(item.id);\n        },\n        [copiedSubtitles, copyHistoryRepository]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFileName)) {\n                handleError(t('error.subtitleFileNotOpen', { fileName: item.subtitleFileName }));\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError, t]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFileName)) {\n            handleError(t('error.subtitleFileNotOpen', { fileName: ankiDialogItem.subtitleFileName }));\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError, t]);\n\n    const handleAnkiDialogRewindFromVideoPlayer = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setVideoPlayerSeekRequest({ timestamp: subtitle.start });\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, handleAnkiDialogCancel]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError(t('error.lostTabConnection', { tabName: tab!.id + ' ' + tab!.title }));\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError, t]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                handleError(e);\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError(t('error.onlyOneDirectoryAllowed'));\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError(t('error.failedToLoadDirectory'));\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError(t('error.subdirectoriesNotAllowed'));\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                handleError(e);\n            }\n        },\n        [handleError, handleFiles, t]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            } else if (message.data.command === 'open-asbplayer-settings') {\n                setSettingsDialogOpen(true);\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback(\n        (oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n            switch (newPlayMode) {\n                case PlayMode.autoPause:\n                    setAlert(t('info.enabledAutoPause')!);\n                    break;\n                case PlayMode.condensed:\n                    setAlert(t('info.enabledCondensedPlayback')!);\n                    break;\n                case PlayMode.normal:\n                    if (oldPlayMode === PlayMode.autoPause) {\n                        setAlert(t('info.disabledAutoPause')!);\n                    } else if (oldPlayMode === PlayMode.condensed) {\n                        setAlert(t('info.disabledCondensedPlayback')!);\n                    }\n                    break;\n            }\n\n            setAlertSeverity('info');\n            setAlertOpen(true);\n        },\n        [t]\n    );\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError(t('error.videoPlayerDragAndDropNotAllowed'));\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen, t]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    const handleCopyToClipboard = useCallback((blob: Blob) => {\n        navigator.clipboard.write([new ClipboardItem({ [blob.type]: blob })]).catch(console.error);\n    }, []);\n\n    const { i18nInitialized } = useI18nInitialized();\n\n    if (!i18nInitialized) {\n        return null;\n    }\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    ankiDialogOpen={ankiDialogOpen}\n                                    seekRequest={videoPlayerSeekRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onAnkiDialogRewind={handleAnkiDialogRewindFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                    onCopyToClipboard={handleCopyToClipboard}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n                                        {nothingLoaded && (\n                                            <LandingPage\n                                                latestExtensionVersion={latestExtensionVersion}\n                                                extensionUrl={extensionUrl}\n                                                extension={extension}\n                                                loading={loading}\n                                                dragging={dragging}\n                                                appBarHidden={appBarHidden}\n                                                onFileSelector={handleFileSelector}\n                                            />\n                                        )}\n                                        <DragOverlay\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            loading={loading}\n                                        />\n                                    </div>\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAnkiDialogRewind={handleAnkiDialogRewind}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        onTakeScreenshot={handleTakeScreenshot}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                        ankiDialogOpen={ankiDialogOpen}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}